# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from paycomet_client.api_client import ApiClient


class PaymentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def execute_purchase(self, **kwargs):  # noqa: E501
        """Executes a payment  # noqa: E501

        Generate a purchase. It will confirms a charge or send a challenge URL to the commerce.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_purchase(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PaymentsBody body:
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_purchase_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.execute_purchase_with_http_info(**kwargs)  # noqa: E501
            return data

    def execute_purchase_with_http_info(self, **kwargs):  # noqa: E501
        """Executes a payment  # noqa: E501

        Generate a purchase. It will confirms a charge or send a challenge URL to the commerce.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_purchase_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PaymentsBody body:
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required)
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'paycomet_api_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_purchase" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'paycomet_api_token' in params:
            header_params['PAYCOMET-API-TOKEN'] = params['paycomet_api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_purchase_rtoken(self, **kwargs):  # noqa: E501
        """Executes a payment by refence  # noqa: E501

        Generate a purchase with reference. It will confirms a charge or send a challenge URL to the commerce.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_purchase_rtoken(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentsRtokenBody body:
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_purchase_rtoken_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.execute_purchase_rtoken_with_http_info(**kwargs)  # noqa: E501
            return data

    def execute_purchase_rtoken_with_http_info(self, **kwargs):  # noqa: E501
        """Executes a payment by refence  # noqa: E501

        Generate a purchase with reference. It will confirms a charge or send a challenge URL to the commerce.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_purchase_rtoken_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentsRtokenBody body:
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'paycomet_api_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_purchase_rtoken" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'paycomet_api_token' in params:
            header_params['PAYCOMET-API-TOKEN'] = params['paycomet_api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payments/rtoken', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operation_info(self, paycomet_api_token, order, **kwargs):  # noqa: E501
        """Get info of a order  # noqa: E501

        operation_info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operation_info(paycomet_api_token, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Query privilege required) (required)
        :param str order: (required)
        :param OrderInfoBody body:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operation_info_with_http_info(paycomet_api_token, order, **kwargs)  # noqa: E501
        else:
            (data) = self.operation_info_with_http_info(paycomet_api_token, order, **kwargs)  # noqa: E501
            return data

    def operation_info_with_http_info(self, paycomet_api_token, order, **kwargs):  # noqa: E501
        """Get info of a order  # noqa: E501

        operation_info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operation_info_with_http_info(paycomet_api_token, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Query privilege required) (required)
        :param str order: (required)
        :param OrderInfoBody body:
        :return: InlineResponse20016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paycomet_api_token', 'order', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operation_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paycomet_api_token' is set
        if ('paycomet_api_token' not in params or
                params['paycomet_api_token'] is None):
            raise ValueError("Missing the required parameter `paycomet_api_token` when calling `operation_info`")  # noqa: E501
        # verify the required parameter 'order' is set
        if ('order' not in params or
                params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `operation_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order' in params:
            path_params['order'] = params['order']  # noqa: E501

        query_params = []

        header_params = {}
        if 'paycomet_api_token' in params:
            header_params['PAYCOMET-API-TOKEN'] = params['paycomet_api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payments/{order}/info', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def operation_search(self, paycomet_api_token, **kwargs):  # noqa: E501
        """Search orders  # noqa: E501

        operation_search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operation_search(paycomet_api_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Query privilege required) (required)
        :param PaymentsSearchBody body:
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.operation_search_with_http_info(paycomet_api_token, **kwargs)  # noqa: E501
        else:
            (data) = self.operation_search_with_http_info(paycomet_api_token, **kwargs)  # noqa: E501
            return data

    def operation_search_with_http_info(self, paycomet_api_token, **kwargs):  # noqa: E501
        """Search orders  # noqa: E501

        operation_search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.operation_search_with_http_info(paycomet_api_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Query privilege required) (required)
        :param PaymentsSearchBody body:
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paycomet_api_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method operation_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paycomet_api_token' is set
        if ('paycomet_api_token' not in params or
                params['paycomet_api_token'] is None):
            raise ValueError("Missing the required parameter `paycomet_api_token` when calling `operation_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'paycomet_api_token' in params:
            header_params['PAYCOMET-API-TOKEN'] = params['paycomet_api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/payments/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
