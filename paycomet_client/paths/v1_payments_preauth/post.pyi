# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from paycomet_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paycomet_client import schemas  # noqa: F401

# Header params
PAYCOMETAPITOKENSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
        'PAYCOMET-API-TOKEN': typing.Union[PAYCOMETAPITOKENSchema, str, ],
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_paycomet_api_token = api_client.HeaderParameter(
    name="PAYCOMET-API-TOKEN",
    style=api_client.ParameterStyle.SIMPLE,
    schema=PAYCOMETAPITOKENSchema,
    required=True,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            
            
            class payment(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "idUser",
                        "amount",
                        "methodId",
                        "currency",
                        "terminal",
                        "tokenUser",
                        "secure",
                        "order",
                        "originalIp",
                    }
                    
                    class properties:
                        terminal = schemas.IntSchema
                        order = schemas.StrSchema
                        amount = schemas.StrSchema
                        currency = schemas.StrSchema
                        originalIp = schemas.StrSchema
                        methodId = schemas.StrSchema
                        secure = schemas.IntSchema
                        scoring = schemas.StrSchema
                        productDescription = schemas.StrSchema
                        merchantDescriptor = schemas.StrSchema
                        userInteraction = schemas.IntSchema
                        TRXType = schemas.StrSchema
                        scaException = schemas.StrSchema
                        urlOk = schemas.StrSchema
                        urlKo = schemas.StrSchema
                        notifyDirectPayment = schemas.IntSchema
                        
                        
                        class merchantData(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    
                                    
                                    class customer(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                id = schemas.StrSchema
                                                name = schemas.StrSchema
                                                surname = schemas.StrSchema
                                                email = schemas.StrSchema
                                                
                                                
                                                class homePhone(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            cc = schemas.IntSchema
                                                            subscriber = schemas.IntSchema
                                                            __annotations__ = {
                                                                "cc": cc,
                                                                "subscriber": subscriber,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["cc"]) -> MetaOapg.properties.cc: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["subscriber"]) -> MetaOapg.properties.subscriber: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cc", "subscriber", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["cc"]) -> typing.Union[MetaOapg.properties.cc, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["subscriber"]) -> typing.Union[MetaOapg.properties.subscriber, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cc", "subscriber", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        cc: typing.Union[MetaOapg.properties.cc, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        subscriber: typing.Union[MetaOapg.properties.subscriber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'homePhone':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            cc=cc,
                                                            subscriber=subscriber,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                
                                                
                                                class mobilePhone(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            cc = schemas.IntSchema
                                                            subscriber = schemas.IntSchema
                                                            __annotations__ = {
                                                                "cc": cc,
                                                                "subscriber": subscriber,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["cc"]) -> MetaOapg.properties.cc: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["subscriber"]) -> MetaOapg.properties.subscriber: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cc", "subscriber", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["cc"]) -> typing.Union[MetaOapg.properties.cc, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["subscriber"]) -> typing.Union[MetaOapg.properties.subscriber, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cc", "subscriber", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        cc: typing.Union[MetaOapg.properties.cc, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        subscriber: typing.Union[MetaOapg.properties.subscriber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'mobilePhone':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            cc=cc,
                                                            subscriber=subscriber,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                
                                                
                                                class workPhone(
                                                    schemas.DictSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        
                                                        class properties:
                                                            cc = schemas.IntSchema
                                                            subscriber = schemas.IntSchema
                                                            __annotations__ = {
                                                                "cc": cc,
                                                                "subscriber": subscriber,
                                                            }
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["cc"]) -> MetaOapg.properties.cc: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: typing_extensions.Literal["subscriber"]) -> MetaOapg.properties.subscriber: ...
                                                    
                                                    @typing.overload
                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                    
                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cc", "subscriber", ], str]):
                                                        # dict_instance[name] accessor
                                                        return super().__getitem__(name)
                                                    
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["cc"]) -> typing.Union[MetaOapg.properties.cc, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: typing_extensions.Literal["subscriber"]) -> typing.Union[MetaOapg.properties.subscriber, schemas.Unset]: ...
                                                    
                                                    @typing.overload
                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                    
                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cc", "subscriber", ], str]):
                                                        return super().get_item_oapg(name)
                                                    
                                                
                                                    def __new__(
                                                        cls,
                                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                                        cc: typing.Union[MetaOapg.properties.cc, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        subscriber: typing.Union[MetaOapg.properties.subscriber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                    ) -> 'workPhone':
                                                        return super().__new__(
                                                            cls,
                                                            *_args,
                                                            cc=cc,
                                                            subscriber=subscriber,
                                                            _configuration=_configuration,
                                                            **kwargs,
                                                        )
                                                firstBuy = schemas.StrSchema
                                                __annotations__ = {
                                                    "id": id,
                                                    "name": name,
                                                    "surname": surname,
                                                    "email": email,
                                                    "homePhone": homePhone,
                                                    "mobilePhone": mobilePhone,
                                                    "workPhone": workPhone,
                                                    "firstBuy": firstBuy,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["surname"]) -> MetaOapg.properties.surname: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["homePhone"]) -> MetaOapg.properties.homePhone: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["mobilePhone"]) -> MetaOapg.properties.mobilePhone: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["firstBuy"]) -> MetaOapg.properties.firstBuy: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "surname", "email", "homePhone", "mobilePhone", "workPhone", "firstBuy", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["surname"]) -> typing.Union[MetaOapg.properties.surname, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["homePhone"]) -> typing.Union[MetaOapg.properties.homePhone, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["mobilePhone"]) -> typing.Union[MetaOapg.properties.mobilePhone, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["firstBuy"]) -> typing.Union[MetaOapg.properties.firstBuy, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "surname", "email", "homePhone", "mobilePhone", "workPhone", "firstBuy", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
                                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                            surname: typing.Union[MetaOapg.properties.surname, str, schemas.Unset] = schemas.unset,
                                            email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
                                            homePhone: typing.Union[MetaOapg.properties.homePhone, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            mobilePhone: typing.Union[MetaOapg.properties.mobilePhone, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            workPhone: typing.Union[MetaOapg.properties.workPhone, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                            firstBuy: typing.Union[MetaOapg.properties.firstBuy, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'customer':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                id=id,
                                                name=name,
                                                surname=surname,
                                                email=email,
                                                homePhone=homePhone,
                                                mobilePhone=mobilePhone,
                                                workPhone=workPhone,
                                                firstBuy=firstBuy,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class shipping(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                shipAddrCity = schemas.StrSchema
                                                shipAddrCountry = schemas.StrSchema
                                                shipAddrLine1 = schemas.StrSchema
                                                shipAddrLine2 = schemas.StrSchema
                                                shipAddrLine3 = schemas.StrSchema
                                                shipAddrPostCode = schemas.StrSchema
                                                shipAddrState = schemas.StrSchema
                                                __annotations__ = {
                                                    "shipAddrCity": shipAddrCity,
                                                    "shipAddrCountry": shipAddrCountry,
                                                    "shipAddrLine1": shipAddrLine1,
                                                    "shipAddrLine2": shipAddrLine2,
                                                    "shipAddrLine3": shipAddrLine3,
                                                    "shipAddrPostCode": shipAddrPostCode,
                                                    "shipAddrState": shipAddrState,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipAddrCity"]) -> MetaOapg.properties.shipAddrCity: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipAddrCountry"]) -> MetaOapg.properties.shipAddrCountry: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipAddrLine1"]) -> MetaOapg.properties.shipAddrLine1: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipAddrLine2"]) -> MetaOapg.properties.shipAddrLine2: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipAddrLine3"]) -> MetaOapg.properties.shipAddrLine3: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipAddrPostCode"]) -> MetaOapg.properties.shipAddrPostCode: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipAddrState"]) -> MetaOapg.properties.shipAddrState: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["shipAddrCity", "shipAddrCountry", "shipAddrLine1", "shipAddrLine2", "shipAddrLine3", "shipAddrPostCode", "shipAddrState", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipAddrCity"]) -> typing.Union[MetaOapg.properties.shipAddrCity, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipAddrCountry"]) -> typing.Union[MetaOapg.properties.shipAddrCountry, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipAddrLine1"]) -> typing.Union[MetaOapg.properties.shipAddrLine1, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipAddrLine2"]) -> typing.Union[MetaOapg.properties.shipAddrLine2, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipAddrLine3"]) -> typing.Union[MetaOapg.properties.shipAddrLine3, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipAddrPostCode"]) -> typing.Union[MetaOapg.properties.shipAddrPostCode, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipAddrState"]) -> typing.Union[MetaOapg.properties.shipAddrState, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["shipAddrCity", "shipAddrCountry", "shipAddrLine1", "shipAddrLine2", "shipAddrLine3", "shipAddrPostCode", "shipAddrState", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            shipAddrCity: typing.Union[MetaOapg.properties.shipAddrCity, str, schemas.Unset] = schemas.unset,
                                            shipAddrCountry: typing.Union[MetaOapg.properties.shipAddrCountry, str, schemas.Unset] = schemas.unset,
                                            shipAddrLine1: typing.Union[MetaOapg.properties.shipAddrLine1, str, schemas.Unset] = schemas.unset,
                                            shipAddrLine2: typing.Union[MetaOapg.properties.shipAddrLine2, str, schemas.Unset] = schemas.unset,
                                            shipAddrLine3: typing.Union[MetaOapg.properties.shipAddrLine3, str, schemas.Unset] = schemas.unset,
                                            shipAddrPostCode: typing.Union[MetaOapg.properties.shipAddrPostCode, str, schemas.Unset] = schemas.unset,
                                            shipAddrState: typing.Union[MetaOapg.properties.shipAddrState, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'shipping':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                shipAddrCity=shipAddrCity,
                                                shipAddrCountry=shipAddrCountry,
                                                shipAddrLine1=shipAddrLine1,
                                                shipAddrLine2=shipAddrLine2,
                                                shipAddrLine3=shipAddrLine3,
                                                shipAddrPostCode=shipAddrPostCode,
                                                shipAddrState=shipAddrState,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class billing(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                billAddrCity = schemas.StrSchema
                                                billAddrCountry = schemas.StrSchema
                                                billAddrLine1 = schemas.StrSchema
                                                billAddrLine2 = schemas.StrSchema
                                                billAddrLine3 = schemas.StrSchema
                                                billAddrPostCode = schemas.StrSchema
                                                billAddrState = schemas.StrSchema
                                                __annotations__ = {
                                                    "billAddrCity": billAddrCity,
                                                    "billAddrCountry": billAddrCountry,
                                                    "billAddrLine1": billAddrLine1,
                                                    "billAddrLine2": billAddrLine2,
                                                    "billAddrLine3": billAddrLine3,
                                                    "billAddrPostCode": billAddrPostCode,
                                                    "billAddrState": billAddrState,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["billAddrCity"]) -> MetaOapg.properties.billAddrCity: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["billAddrCountry"]) -> MetaOapg.properties.billAddrCountry: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["billAddrLine1"]) -> MetaOapg.properties.billAddrLine1: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["billAddrLine2"]) -> MetaOapg.properties.billAddrLine2: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["billAddrLine3"]) -> MetaOapg.properties.billAddrLine3: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["billAddrPostCode"]) -> MetaOapg.properties.billAddrPostCode: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["billAddrState"]) -> MetaOapg.properties.billAddrState: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["billAddrCity", "billAddrCountry", "billAddrLine1", "billAddrLine2", "billAddrLine3", "billAddrPostCode", "billAddrState", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["billAddrCity"]) -> typing.Union[MetaOapg.properties.billAddrCity, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["billAddrCountry"]) -> typing.Union[MetaOapg.properties.billAddrCountry, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["billAddrLine1"]) -> typing.Union[MetaOapg.properties.billAddrLine1, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["billAddrLine2"]) -> typing.Union[MetaOapg.properties.billAddrLine2, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["billAddrLine3"]) -> typing.Union[MetaOapg.properties.billAddrLine3, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["billAddrPostCode"]) -> typing.Union[MetaOapg.properties.billAddrPostCode, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["billAddrState"]) -> typing.Union[MetaOapg.properties.billAddrState, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["billAddrCity", "billAddrCountry", "billAddrLine1", "billAddrLine2", "billAddrLine3", "billAddrPostCode", "billAddrState", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            billAddrCity: typing.Union[MetaOapg.properties.billAddrCity, str, schemas.Unset] = schemas.unset,
                                            billAddrCountry: typing.Union[MetaOapg.properties.billAddrCountry, str, schemas.Unset] = schemas.unset,
                                            billAddrLine1: typing.Union[MetaOapg.properties.billAddrLine1, str, schemas.Unset] = schemas.unset,
                                            billAddrLine2: typing.Union[MetaOapg.properties.billAddrLine2, str, schemas.Unset] = schemas.unset,
                                            billAddrLine3: typing.Union[MetaOapg.properties.billAddrLine3, str, schemas.Unset] = schemas.unset,
                                            billAddrPostCode: typing.Union[MetaOapg.properties.billAddrPostCode, str, schemas.Unset] = schemas.unset,
                                            billAddrState: typing.Union[MetaOapg.properties.billAddrState, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'billing':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                billAddrCity=billAddrCity,
                                                billAddrCountry=billAddrCountry,
                                                billAddrLine1=billAddrLine1,
                                                billAddrLine2=billAddrLine2,
                                                billAddrLine3=billAddrLine3,
                                                billAddrPostCode=billAddrPostCode,
                                                billAddrState=billAddrState,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    acctID = schemas.StrSchema
                                    
                                    
                                    class acctInfo(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                chAccAgeInd = schemas.StrSchema
                                                chAccChange = schemas.StrSchema
                                                chAccChangeInd = schemas.StrSchema
                                                chAccDate = schemas.StrSchema
                                                chAccPwChange = schemas.StrSchema
                                                chAccPwChangeInd = schemas.StrSchema
                                                nbPurchaseAccount = schemas.IntSchema
                                                provisionAttemptsDay = schemas.IntSchema
                                                txnActivityDay = schemas.StrSchema
                                                txnActivityYear = schemas.StrSchema
                                                paymentAccAge = schemas.StrSchema
                                                paymentAccInd = schemas.StrSchema
                                                shipAddressUsage = schemas.StrSchema
                                                shipAddressUsageInd = schemas.StrSchema
                                                shipNameIndicator = schemas.StrSchema
                                                suspiciousAccActivity = schemas.StrSchema
                                                __annotations__ = {
                                                    "chAccAgeInd": chAccAgeInd,
                                                    "chAccChange": chAccChange,
                                                    "chAccChangeInd": chAccChangeInd,
                                                    "chAccDate": chAccDate,
                                                    "chAccPwChange": chAccPwChange,
                                                    "chAccPwChangeInd": chAccPwChangeInd,
                                                    "nbPurchaseAccount": nbPurchaseAccount,
                                                    "provisionAttemptsDay": provisionAttemptsDay,
                                                    "txnActivityDay": txnActivityDay,
                                                    "txnActivityYear": txnActivityYear,
                                                    "paymentAccAge": paymentAccAge,
                                                    "paymentAccInd": paymentAccInd,
                                                    "shipAddressUsage": shipAddressUsage,
                                                    "shipAddressUsageInd": shipAddressUsageInd,
                                                    "shipNameIndicator": shipNameIndicator,
                                                    "suspiciousAccActivity": suspiciousAccActivity,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["chAccAgeInd"]) -> MetaOapg.properties.chAccAgeInd: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["chAccChange"]) -> MetaOapg.properties.chAccChange: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["chAccChangeInd"]) -> MetaOapg.properties.chAccChangeInd: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["chAccDate"]) -> MetaOapg.properties.chAccDate: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["chAccPwChange"]) -> MetaOapg.properties.chAccPwChange: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["chAccPwChangeInd"]) -> MetaOapg.properties.chAccPwChangeInd: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["nbPurchaseAccount"]) -> MetaOapg.properties.nbPurchaseAccount: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["provisionAttemptsDay"]) -> MetaOapg.properties.provisionAttemptsDay: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["txnActivityDay"]) -> MetaOapg.properties.txnActivityDay: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["txnActivityYear"]) -> MetaOapg.properties.txnActivityYear: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["paymentAccAge"]) -> MetaOapg.properties.paymentAccAge: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["paymentAccInd"]) -> MetaOapg.properties.paymentAccInd: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipAddressUsage"]) -> MetaOapg.properties.shipAddressUsage: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipAddressUsageInd"]) -> MetaOapg.properties.shipAddressUsageInd: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipNameIndicator"]) -> MetaOapg.properties.shipNameIndicator: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["suspiciousAccActivity"]) -> MetaOapg.properties.suspiciousAccActivity: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["chAccAgeInd", "chAccChange", "chAccChangeInd", "chAccDate", "chAccPwChange", "chAccPwChangeInd", "nbPurchaseAccount", "provisionAttemptsDay", "txnActivityDay", "txnActivityYear", "paymentAccAge", "paymentAccInd", "shipAddressUsage", "shipAddressUsageInd", "shipNameIndicator", "suspiciousAccActivity", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["chAccAgeInd"]) -> typing.Union[MetaOapg.properties.chAccAgeInd, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["chAccChange"]) -> typing.Union[MetaOapg.properties.chAccChange, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["chAccChangeInd"]) -> typing.Union[MetaOapg.properties.chAccChangeInd, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["chAccDate"]) -> typing.Union[MetaOapg.properties.chAccDate, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["chAccPwChange"]) -> typing.Union[MetaOapg.properties.chAccPwChange, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["chAccPwChangeInd"]) -> typing.Union[MetaOapg.properties.chAccPwChangeInd, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["nbPurchaseAccount"]) -> typing.Union[MetaOapg.properties.nbPurchaseAccount, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["provisionAttemptsDay"]) -> typing.Union[MetaOapg.properties.provisionAttemptsDay, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["txnActivityDay"]) -> typing.Union[MetaOapg.properties.txnActivityDay, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["txnActivityYear"]) -> typing.Union[MetaOapg.properties.txnActivityYear, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["paymentAccAge"]) -> typing.Union[MetaOapg.properties.paymentAccAge, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["paymentAccInd"]) -> typing.Union[MetaOapg.properties.paymentAccInd, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipAddressUsage"]) -> typing.Union[MetaOapg.properties.shipAddressUsage, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipAddressUsageInd"]) -> typing.Union[MetaOapg.properties.shipAddressUsageInd, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipNameIndicator"]) -> typing.Union[MetaOapg.properties.shipNameIndicator, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["suspiciousAccActivity"]) -> typing.Union[MetaOapg.properties.suspiciousAccActivity, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["chAccAgeInd", "chAccChange", "chAccChangeInd", "chAccDate", "chAccPwChange", "chAccPwChangeInd", "nbPurchaseAccount", "provisionAttemptsDay", "txnActivityDay", "txnActivityYear", "paymentAccAge", "paymentAccInd", "shipAddressUsage", "shipAddressUsageInd", "shipNameIndicator", "suspiciousAccActivity", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            chAccAgeInd: typing.Union[MetaOapg.properties.chAccAgeInd, str, schemas.Unset] = schemas.unset,
                                            chAccChange: typing.Union[MetaOapg.properties.chAccChange, str, schemas.Unset] = schemas.unset,
                                            chAccChangeInd: typing.Union[MetaOapg.properties.chAccChangeInd, str, schemas.Unset] = schemas.unset,
                                            chAccDate: typing.Union[MetaOapg.properties.chAccDate, str, schemas.Unset] = schemas.unset,
                                            chAccPwChange: typing.Union[MetaOapg.properties.chAccPwChange, str, schemas.Unset] = schemas.unset,
                                            chAccPwChangeInd: typing.Union[MetaOapg.properties.chAccPwChangeInd, str, schemas.Unset] = schemas.unset,
                                            nbPurchaseAccount: typing.Union[MetaOapg.properties.nbPurchaseAccount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                            provisionAttemptsDay: typing.Union[MetaOapg.properties.provisionAttemptsDay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                            txnActivityDay: typing.Union[MetaOapg.properties.txnActivityDay, str, schemas.Unset] = schemas.unset,
                                            txnActivityYear: typing.Union[MetaOapg.properties.txnActivityYear, str, schemas.Unset] = schemas.unset,
                                            paymentAccAge: typing.Union[MetaOapg.properties.paymentAccAge, str, schemas.Unset] = schemas.unset,
                                            paymentAccInd: typing.Union[MetaOapg.properties.paymentAccInd, str, schemas.Unset] = schemas.unset,
                                            shipAddressUsage: typing.Union[MetaOapg.properties.shipAddressUsage, str, schemas.Unset] = schemas.unset,
                                            shipAddressUsageInd: typing.Union[MetaOapg.properties.shipAddressUsageInd, str, schemas.Unset] = schemas.unset,
                                            shipNameIndicator: typing.Union[MetaOapg.properties.shipNameIndicator, str, schemas.Unset] = schemas.unset,
                                            suspiciousAccActivity: typing.Union[MetaOapg.properties.suspiciousAccActivity, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'acctInfo':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                chAccAgeInd=chAccAgeInd,
                                                chAccChange=chAccChange,
                                                chAccChangeInd=chAccChangeInd,
                                                chAccDate=chAccDate,
                                                chAccPwChange=chAccPwChange,
                                                chAccPwChangeInd=chAccPwChangeInd,
                                                nbPurchaseAccount=nbPurchaseAccount,
                                                provisionAttemptsDay=provisionAttemptsDay,
                                                txnActivityDay=txnActivityDay,
                                                txnActivityYear=txnActivityYear,
                                                paymentAccAge=paymentAccAge,
                                                paymentAccInd=paymentAccInd,
                                                shipAddressUsage=shipAddressUsage,
                                                shipAddressUsageInd=shipAddressUsageInd,
                                                shipNameIndicator=shipNameIndicator,
                                                suspiciousAccActivity=suspiciousAccActivity,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class merchantRiskIndicator(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                deliveryEmailAddress = schemas.StrSchema
                                                deliveryTimeframe = schemas.StrSchema
                                                giftCardAmount = schemas.StrSchema
                                                giftCardCount = schemas.IntSchema
                                                giftCardCurr = schemas.StrSchema
                                                preOrderDate = schemas.StrSchema
                                                preOrderPurchaseInd = schemas.StrSchema
                                                reorderItemsInd = schemas.StrSchema
                                                shipIndicator = schemas.StrSchema
                                                __annotations__ = {
                                                    "deliveryEmailAddress": deliveryEmailAddress,
                                                    "deliveryTimeframe": deliveryTimeframe,
                                                    "giftCardAmount": giftCardAmount,
                                                    "giftCardCount": giftCardCount,
                                                    "giftCardCurr": giftCardCurr,
                                                    "preOrderDate": preOrderDate,
                                                    "preOrderPurchaseInd": preOrderPurchaseInd,
                                                    "reorderItemsInd": reorderItemsInd,
                                                    "shipIndicator": shipIndicator,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["deliveryEmailAddress"]) -> MetaOapg.properties.deliveryEmailAddress: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["deliveryTimeframe"]) -> MetaOapg.properties.deliveryTimeframe: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["giftCardAmount"]) -> MetaOapg.properties.giftCardAmount: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["giftCardCount"]) -> MetaOapg.properties.giftCardCount: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["giftCardCurr"]) -> MetaOapg.properties.giftCardCurr: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["preOrderDate"]) -> MetaOapg.properties.preOrderDate: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["preOrderPurchaseInd"]) -> MetaOapg.properties.preOrderPurchaseInd: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["reorderItemsInd"]) -> MetaOapg.properties.reorderItemsInd: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["shipIndicator"]) -> MetaOapg.properties.shipIndicator: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["deliveryEmailAddress", "deliveryTimeframe", "giftCardAmount", "giftCardCount", "giftCardCurr", "preOrderDate", "preOrderPurchaseInd", "reorderItemsInd", "shipIndicator", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["deliveryEmailAddress"]) -> typing.Union[MetaOapg.properties.deliveryEmailAddress, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["deliveryTimeframe"]) -> typing.Union[MetaOapg.properties.deliveryTimeframe, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["giftCardAmount"]) -> typing.Union[MetaOapg.properties.giftCardAmount, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["giftCardCount"]) -> typing.Union[MetaOapg.properties.giftCardCount, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["giftCardCurr"]) -> typing.Union[MetaOapg.properties.giftCardCurr, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["preOrderDate"]) -> typing.Union[MetaOapg.properties.preOrderDate, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["preOrderPurchaseInd"]) -> typing.Union[MetaOapg.properties.preOrderPurchaseInd, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["reorderItemsInd"]) -> typing.Union[MetaOapg.properties.reorderItemsInd, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["shipIndicator"]) -> typing.Union[MetaOapg.properties.shipIndicator, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deliveryEmailAddress", "deliveryTimeframe", "giftCardAmount", "giftCardCount", "giftCardCurr", "preOrderDate", "preOrderPurchaseInd", "reorderItemsInd", "shipIndicator", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            deliveryEmailAddress: typing.Union[MetaOapg.properties.deliveryEmailAddress, str, schemas.Unset] = schemas.unset,
                                            deliveryTimeframe: typing.Union[MetaOapg.properties.deliveryTimeframe, str, schemas.Unset] = schemas.unset,
                                            giftCardAmount: typing.Union[MetaOapg.properties.giftCardAmount, str, schemas.Unset] = schemas.unset,
                                            giftCardCount: typing.Union[MetaOapg.properties.giftCardCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                            giftCardCurr: typing.Union[MetaOapg.properties.giftCardCurr, str, schemas.Unset] = schemas.unset,
                                            preOrderDate: typing.Union[MetaOapg.properties.preOrderDate, str, schemas.Unset] = schemas.unset,
                                            preOrderPurchaseInd: typing.Union[MetaOapg.properties.preOrderPurchaseInd, str, schemas.Unset] = schemas.unset,
                                            reorderItemsInd: typing.Union[MetaOapg.properties.reorderItemsInd, str, schemas.Unset] = schemas.unset,
                                            shipIndicator: typing.Union[MetaOapg.properties.shipIndicator, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'merchantRiskIndicator':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                deliveryEmailAddress=deliveryEmailAddress,
                                                deliveryTimeframe=deliveryTimeframe,
                                                giftCardAmount=giftCardAmount,
                                                giftCardCount=giftCardCount,
                                                giftCardCurr=giftCardCurr,
                                                preOrderDate=preOrderDate,
                                                preOrderPurchaseInd=preOrderPurchaseInd,
                                                reorderItemsInd=reorderItemsInd,
                                                shipIndicator=shipIndicator,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class threeDSRequestorAuthenticationInfo(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            class properties:
                                                threeDSReqAuthData = schemas.StrSchema
                                                threeDSReqAuthMethod = schemas.StrSchema
                                                threeDSReqAuthTimestamp = schemas.StrSchema
                                                __annotations__ = {
                                                    "threeDSReqAuthData": threeDSReqAuthData,
                                                    "threeDSReqAuthMethod": threeDSReqAuthMethod,
                                                    "threeDSReqAuthTimestamp": threeDSReqAuthTimestamp,
                                                }
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["threeDSReqAuthData"]) -> MetaOapg.properties.threeDSReqAuthData: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["threeDSReqAuthMethod"]) -> MetaOapg.properties.threeDSReqAuthMethod: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["threeDSReqAuthTimestamp"]) -> MetaOapg.properties.threeDSReqAuthTimestamp: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["threeDSReqAuthData", "threeDSReqAuthMethod", "threeDSReqAuthTimestamp", ], str]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["threeDSReqAuthData"]) -> typing.Union[MetaOapg.properties.threeDSReqAuthData, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["threeDSReqAuthMethod"]) -> typing.Union[MetaOapg.properties.threeDSReqAuthMethod, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["threeDSReqAuthTimestamp"]) -> typing.Union[MetaOapg.properties.threeDSReqAuthTimestamp, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["threeDSReqAuthData", "threeDSReqAuthMethod", "threeDSReqAuthTimestamp", ], str]):
                                            return super().get_item_oapg(name)
                                        
                                    
                                        def __new__(
                                            cls,
                                            *_args: typing.Union[dict, frozendict.frozendict, ],
                                            threeDSReqAuthData: typing.Union[MetaOapg.properties.threeDSReqAuthData, str, schemas.Unset] = schemas.unset,
                                            threeDSReqAuthMethod: typing.Union[MetaOapg.properties.threeDSReqAuthMethod, str, schemas.Unset] = schemas.unset,
                                            threeDSReqAuthTimestamp: typing.Union[MetaOapg.properties.threeDSReqAuthTimestamp, str, schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                        ) -> 'threeDSRequestorAuthenticationInfo':
                                            return super().__new__(
                                                cls,
                                                *_args,
                                                threeDSReqAuthData=threeDSReqAuthData,
                                                threeDSReqAuthMethod=threeDSReqAuthMethod,
                                                threeDSReqAuthTimestamp=threeDSReqAuthTimestamp,
                                                _configuration=_configuration,
                                                **kwargs,
                                            )
                                    
                                    
                                    class shoppingCart(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            
                                            class items(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    class properties:
                                                        sku = schemas.StrSchema
                                                        quantity = schemas.IntSchema
                                                        unitPrice = schemas.IntSchema
                                                        name = schemas.StrSchema
                                                        category = schemas.StrSchema
                                                        articleType = schemas.IntSchema
                                                        __annotations__ = {
                                                            "sku": sku,
                                                            "quantity": quantity,
                                                            "unitPrice": unitPrice,
                                                            "name": name,
                                                            "category": category,
                                                            "articleType": articleType,
                                                        }
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["unitPrice"]) -> MetaOapg.properties.unitPrice: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: typing_extensions.Literal["articleType"]) -> MetaOapg.properties.articleType: ...
                                                
                                                @typing.overload
                                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                
                                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["sku", "quantity", "unitPrice", "name", "category", "articleType", ], str]):
                                                    # dict_instance[name] accessor
                                                    return super().__getitem__(name)
                                                
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["unitPrice"]) -> typing.Union[MetaOapg.properties.unitPrice, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: typing_extensions.Literal["articleType"]) -> typing.Union[MetaOapg.properties.articleType, schemas.Unset]: ...
                                                
                                                @typing.overload
                                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                
                                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sku", "quantity", "unitPrice", "name", "category", "articleType", ], str]):
                                                    return super().get_item_oapg(name)
                                                
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
                                                    quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    unitPrice: typing.Union[MetaOapg.properties.unitPrice, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                                                    category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
                                                    articleType: typing.Union[MetaOapg.properties.articleType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'items':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        sku=sku,
                                                        quantity=quantity,
                                                        unitPrice=unitPrice,
                                                        name=name,
                                                        category=category,
                                                        articleType=articleType,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                    
                                        def __new__(
                                            cls,
                                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'shoppingCart':
                                            return super().__new__(
                                                cls,
                                                _arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    addrMatch = schemas.StrSchema
                                    purchaseInstalData = schemas.IntSchema
                                    recurringExpiry = schemas.StrSchema
                                    recurringFrequency = schemas.StrSchema
                                    __annotations__ = {
                                        "customer": customer,
                                        "shipping": shipping,
                                        "billing": billing,
                                        "acctID": acctID,
                                        "acctInfo": acctInfo,
                                        "merchantRiskIndicator": merchantRiskIndicator,
                                        "threeDSRequestorAuthenticationInfo": threeDSRequestorAuthenticationInfo,
                                        "shoppingCart": shoppingCart,
                                        "addrMatch": addrMatch,
                                        "purchaseInstalData": purchaseInstalData,
                                        "recurringExpiry": recurringExpiry,
                                        "recurringFrequency": recurringFrequency,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["customer"]) -> MetaOapg.properties.customer: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["shipping"]) -> MetaOapg.properties.shipping: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["billing"]) -> MetaOapg.properties.billing: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["acctID"]) -> MetaOapg.properties.acctID: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["acctInfo"]) -> MetaOapg.properties.acctInfo: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["merchantRiskIndicator"]) -> MetaOapg.properties.merchantRiskIndicator: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["threeDSRequestorAuthenticationInfo"]) -> MetaOapg.properties.threeDSRequestorAuthenticationInfo: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["shoppingCart"]) -> MetaOapg.properties.shoppingCart: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["addrMatch"]) -> MetaOapg.properties.addrMatch: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["purchaseInstalData"]) -> MetaOapg.properties.purchaseInstalData: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["recurringExpiry"]) -> MetaOapg.properties.recurringExpiry: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["recurringFrequency"]) -> MetaOapg.properties.recurringFrequency: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["customer", "shipping", "billing", "acctID", "acctInfo", "merchantRiskIndicator", "threeDSRequestorAuthenticationInfo", "shoppingCart", "addrMatch", "purchaseInstalData", "recurringExpiry", "recurringFrequency", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union[MetaOapg.properties.customer, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["shipping"]) -> typing.Union[MetaOapg.properties.shipping, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["billing"]) -> typing.Union[MetaOapg.properties.billing, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["acctID"]) -> typing.Union[MetaOapg.properties.acctID, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["acctInfo"]) -> typing.Union[MetaOapg.properties.acctInfo, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["merchantRiskIndicator"]) -> typing.Union[MetaOapg.properties.merchantRiskIndicator, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["threeDSRequestorAuthenticationInfo"]) -> typing.Union[MetaOapg.properties.threeDSRequestorAuthenticationInfo, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["shoppingCart"]) -> typing.Union[MetaOapg.properties.shoppingCart, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["addrMatch"]) -> typing.Union[MetaOapg.properties.addrMatch, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["purchaseInstalData"]) -> typing.Union[MetaOapg.properties.purchaseInstalData, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["recurringExpiry"]) -> typing.Union[MetaOapg.properties.recurringExpiry, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["recurringFrequency"]) -> typing.Union[MetaOapg.properties.recurringFrequency, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customer", "shipping", "billing", "acctID", "acctInfo", "merchantRiskIndicator", "threeDSRequestorAuthenticationInfo", "shoppingCart", "addrMatch", "purchaseInstalData", "recurringExpiry", "recurringFrequency", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                customer: typing.Union[MetaOapg.properties.customer, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                shipping: typing.Union[MetaOapg.properties.shipping, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                billing: typing.Union[MetaOapg.properties.billing, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                acctID: typing.Union[MetaOapg.properties.acctID, str, schemas.Unset] = schemas.unset,
                                acctInfo: typing.Union[MetaOapg.properties.acctInfo, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                merchantRiskIndicator: typing.Union[MetaOapg.properties.merchantRiskIndicator, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                threeDSRequestorAuthenticationInfo: typing.Union[MetaOapg.properties.threeDSRequestorAuthenticationInfo, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                shoppingCart: typing.Union[MetaOapg.properties.shoppingCart, list, tuple, schemas.Unset] = schemas.unset,
                                addrMatch: typing.Union[MetaOapg.properties.addrMatch, str, schemas.Unset] = schemas.unset,
                                purchaseInstalData: typing.Union[MetaOapg.properties.purchaseInstalData, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                recurringExpiry: typing.Union[MetaOapg.properties.recurringExpiry, str, schemas.Unset] = schemas.unset,
                                recurringFrequency: typing.Union[MetaOapg.properties.recurringFrequency, str, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'merchantData':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    customer=customer,
                                    shipping=shipping,
                                    billing=billing,
                                    acctID=acctID,
                                    acctInfo=acctInfo,
                                    merchantRiskIndicator=merchantRiskIndicator,
                                    threeDSRequestorAuthenticationInfo=threeDSRequestorAuthenticationInfo,
                                    shoppingCart=shoppingCart,
                                    addrMatch=addrMatch,
                                    purchaseInstalData=purchaseInstalData,
                                    recurringExpiry=recurringExpiry,
                                    recurringFrequency=recurringFrequency,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        idUser = schemas.IntSchema
                        tokenUser = schemas.StrSchema
                        deferred = schemas.IntSchema
                        __annotations__ = {
                            "terminal": terminal,
                            "order": order,
                            "amount": amount,
                            "currency": currency,
                            "originalIp": originalIp,
                            "methodId": methodId,
                            "secure": secure,
                            "scoring": scoring,
                            "productDescription": productDescription,
                            "merchantDescriptor": merchantDescriptor,
                            "userInteraction": userInteraction,
                            "TRXType": TRXType,
                            "scaException": scaException,
                            "urlOk": urlOk,
                            "urlKo": urlKo,
                            "notifyDirectPayment": notifyDirectPayment,
                            "merchantData": merchantData,
                            "idUser": idUser,
                            "tokenUser": tokenUser,
                            "deferred": deferred,
                        }
                
                idUser: MetaOapg.properties.idUser
                amount: MetaOapg.properties.amount
                methodId: MetaOapg.properties.methodId
                currency: MetaOapg.properties.currency
                terminal: MetaOapg.properties.terminal
                tokenUser: MetaOapg.properties.tokenUser
                secure: MetaOapg.properties.secure
                order: MetaOapg.properties.order
                originalIp: MetaOapg.properties.originalIp
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["terminal"]) -> MetaOapg.properties.terminal: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["originalIp"]) -> MetaOapg.properties.originalIp: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["methodId"]) -> MetaOapg.properties.methodId: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["secure"]) -> MetaOapg.properties.secure: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["scoring"]) -> MetaOapg.properties.scoring: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["productDescription"]) -> MetaOapg.properties.productDescription: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["merchantDescriptor"]) -> MetaOapg.properties.merchantDescriptor: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["userInteraction"]) -> MetaOapg.properties.userInteraction: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["TRXType"]) -> MetaOapg.properties.TRXType: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["scaException"]) -> MetaOapg.properties.scaException: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["urlOk"]) -> MetaOapg.properties.urlOk: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["urlKo"]) -> MetaOapg.properties.urlKo: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["notifyDirectPayment"]) -> MetaOapg.properties.notifyDirectPayment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["merchantData"]) -> MetaOapg.properties.merchantData: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["idUser"]) -> MetaOapg.properties.idUser: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tokenUser"]) -> MetaOapg.properties.tokenUser: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["deferred"]) -> MetaOapg.properties.deferred: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["terminal", "order", "amount", "currency", "originalIp", "methodId", "secure", "scoring", "productDescription", "merchantDescriptor", "userInteraction", "TRXType", "scaException", "urlOk", "urlKo", "notifyDirectPayment", "merchantData", "idUser", "tokenUser", "deferred", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["terminal"]) -> MetaOapg.properties.terminal: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["originalIp"]) -> MetaOapg.properties.originalIp: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["methodId"]) -> MetaOapg.properties.methodId: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["secure"]) -> MetaOapg.properties.secure: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["scoring"]) -> typing.Union[MetaOapg.properties.scoring, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["productDescription"]) -> typing.Union[MetaOapg.properties.productDescription, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["merchantDescriptor"]) -> typing.Union[MetaOapg.properties.merchantDescriptor, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["userInteraction"]) -> typing.Union[MetaOapg.properties.userInteraction, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["TRXType"]) -> typing.Union[MetaOapg.properties.TRXType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["scaException"]) -> typing.Union[MetaOapg.properties.scaException, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["urlOk"]) -> typing.Union[MetaOapg.properties.urlOk, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["urlKo"]) -> typing.Union[MetaOapg.properties.urlKo, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["notifyDirectPayment"]) -> typing.Union[MetaOapg.properties.notifyDirectPayment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["merchantData"]) -> typing.Union[MetaOapg.properties.merchantData, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["idUser"]) -> MetaOapg.properties.idUser: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tokenUser"]) -> MetaOapg.properties.tokenUser: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["deferred"]) -> typing.Union[MetaOapg.properties.deferred, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["terminal", "order", "amount", "currency", "originalIp", "methodId", "secure", "scoring", "productDescription", "merchantDescriptor", "userInteraction", "TRXType", "scaException", "urlOk", "urlKo", "notifyDirectPayment", "merchantData", "idUser", "tokenUser", "deferred", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    idUser: typing.Union[MetaOapg.properties.idUser, decimal.Decimal, int, ],
                    amount: typing.Union[MetaOapg.properties.amount, str, ],
                    methodId: typing.Union[MetaOapg.properties.methodId, str, ],
                    currency: typing.Union[MetaOapg.properties.currency, str, ],
                    terminal: typing.Union[MetaOapg.properties.terminal, decimal.Decimal, int, ],
                    tokenUser: typing.Union[MetaOapg.properties.tokenUser, str, ],
                    secure: typing.Union[MetaOapg.properties.secure, decimal.Decimal, int, ],
                    order: typing.Union[MetaOapg.properties.order, str, ],
                    originalIp: typing.Union[MetaOapg.properties.originalIp, str, ],
                    scoring: typing.Union[MetaOapg.properties.scoring, str, schemas.Unset] = schemas.unset,
                    productDescription: typing.Union[MetaOapg.properties.productDescription, str, schemas.Unset] = schemas.unset,
                    merchantDescriptor: typing.Union[MetaOapg.properties.merchantDescriptor, str, schemas.Unset] = schemas.unset,
                    userInteraction: typing.Union[MetaOapg.properties.userInteraction, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    TRXType: typing.Union[MetaOapg.properties.TRXType, str, schemas.Unset] = schemas.unset,
                    scaException: typing.Union[MetaOapg.properties.scaException, str, schemas.Unset] = schemas.unset,
                    urlOk: typing.Union[MetaOapg.properties.urlOk, str, schemas.Unset] = schemas.unset,
                    urlKo: typing.Union[MetaOapg.properties.urlKo, str, schemas.Unset] = schemas.unset,
                    notifyDirectPayment: typing.Union[MetaOapg.properties.notifyDirectPayment, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    merchantData: typing.Union[MetaOapg.properties.merchantData, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    deferred: typing.Union[MetaOapg.properties.deferred, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'payment':
                    return super().__new__(
                        cls,
                        *_args,
                        idUser=idUser,
                        amount=amount,
                        methodId=methodId,
                        currency=currency,
                        terminal=terminal,
                        tokenUser=tokenUser,
                        secure=secure,
                        order=order,
                        originalIp=originalIp,
                        scoring=scoring,
                        productDescription=productDescription,
                        merchantDescriptor=merchantDescriptor,
                        userInteraction=userInteraction,
                        TRXType=TRXType,
                        scaException=scaException,
                        urlOk=urlOk,
                        urlKo=urlKo,
                        notifyDirectPayment=notifyDirectPayment,
                        merchantData=merchantData,
                        deferred=deferred,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "payment": payment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment"]) -> MetaOapg.properties.payment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["payment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment"]) -> typing.Union[MetaOapg.properties.payment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["payment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        payment: typing.Union[MetaOapg.properties.payment, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            payment=payment,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            errorCode = schemas.IntSchema
            amount = schemas.StrSchema
            currency = schemas.StrSchema
            methodId = schemas.IntSchema
            order = schemas.StrSchema
            authCode = schemas.StrSchema
            challengeUrl = schemas.StrSchema
            idUser = schemas.IntSchema
            tokenUser = schemas.StrSchema
            cardCountry = schemas.StrSchema
            __annotations__ = {
                "errorCode": errorCode,
                "amount": amount,
                "currency": currency,
                "methodId": methodId,
                "order": order,
                "authCode": authCode,
                "challengeUrl": challengeUrl,
                "idUser": idUser,
                "tokenUser": tokenUser,
                "cardCountry": cardCountry,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["methodId"]) -> MetaOapg.properties.methodId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authCode"]) -> MetaOapg.properties.authCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["challengeUrl"]) -> MetaOapg.properties.challengeUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idUser"]) -> MetaOapg.properties.idUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenUser"]) -> MetaOapg.properties.tokenUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardCountry"]) -> MetaOapg.properties.cardCountry: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errorCode", "amount", "currency", "methodId", "order", "authCode", "challengeUrl", "idUser", "tokenUser", "cardCountry", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> typing.Union[MetaOapg.properties.errorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["methodId"]) -> typing.Union[MetaOapg.properties.methodId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authCode"]) -> typing.Union[MetaOapg.properties.authCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["challengeUrl"]) -> typing.Union[MetaOapg.properties.challengeUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idUser"]) -> typing.Union[MetaOapg.properties.idUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenUser"]) -> typing.Union[MetaOapg.properties.tokenUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardCountry"]) -> typing.Union[MetaOapg.properties.cardCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errorCode", "amount", "currency", "methodId", "order", "authCode", "challengeUrl", "idUser", "tokenUser", "cardCountry", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        methodId: typing.Union[MetaOapg.properties.methodId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        order: typing.Union[MetaOapg.properties.order, str, schemas.Unset] = schemas.unset,
        authCode: typing.Union[MetaOapg.properties.authCode, str, schemas.Unset] = schemas.unset,
        challengeUrl: typing.Union[MetaOapg.properties.challengeUrl, str, schemas.Unset] = schemas.unset,
        idUser: typing.Union[MetaOapg.properties.idUser, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tokenUser: typing.Union[MetaOapg.properties.tokenUser, str, schemas.Unset] = schemas.unset,
        cardCountry: typing.Union[MetaOapg.properties.cardCountry, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            errorCode=errorCode,
            amount=amount,
            currency=currency,
            methodId=methodId,
            order=order,
            authCode=authCode,
            challengeUrl=challengeUrl,
            idUser=idUser,
            tokenUser=tokenUser,
            cardCountry=cardCountry,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor422ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            errorCode = schemas.IntSchema
            
            
            class error(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        message = schemas.StrSchema
                        
                        
                        class detail(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'detail':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "message": message,
                            "detail": detail,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["message", "detail", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message", "detail", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
                    detail: typing.Union[MetaOapg.properties.detail, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'error':
                    return super().__new__(
                        cls,
                        *_args,
                        message=message,
                        detail=detail,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "errorCode": errorCode,
                "error": error,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errorCode", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> typing.Union[MetaOapg.properties.errorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errorCode", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor422ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            errorCode=errorCode,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor422ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _create_preauthorization_oapg(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _create_preauthorization_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def _create_preauthorization_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _create_preauthorization_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _create_preauthorization_oapg(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Create preauthorization
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_paycomet_api_token,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_any_type.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class CreatePreauthorization(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def create_preauthorization(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def create_preauthorization(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def create_preauthorization(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def create_preauthorization(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def create_preauthorization(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._create_preauthorization_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def post(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def post(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def post(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def post(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._create_preauthorization_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


