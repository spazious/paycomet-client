# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from paycomet_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paycomet_client import schemas  # noqa: F401

from . import path

# Header params
PAYCOMETAPITOKENSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
        'PAYCOMET-API-TOKEN': typing.Union[PAYCOMETAPITOKENSchema, str, ],
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_paycomet_api_token = api_client.HeaderParameter(
    name="PAYCOMET-API-TOKEN",
    style=api_client.ParameterStyle.SIMPLE,
    schema=PAYCOMETAPITOKENSchema,
    required=True,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "fromDate",
            "minAmount",
            "operations",
            "sortType",
            "sortOrder",
            "toDate",
            "currency",
            "state",
            "terminal",
            "maxAmount",
        }
        
        class properties:
            terminal = schemas.IntSchema
            sortType = schemas.IntSchema
            sortOrder = schemas.StrSchema
            
            
            class operations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'operations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            minAmount = schemas.IntSchema
            maxAmount = schemas.IntSchema
            state = schemas.IntSchema
            fromDate = schemas.StrSchema
            toDate = schemas.StrSchema
            currency = schemas.StrSchema
            limit = schemas.IntSchema
            order = schemas.StrSchema
            searchType = schemas.IntSchema
            __annotations__ = {
                "terminal": terminal,
                "sortType": sortType,
                "sortOrder": sortOrder,
                "operations": operations,
                "minAmount": minAmount,
                "maxAmount": maxAmount,
                "state": state,
                "fromDate": fromDate,
                "toDate": toDate,
                "currency": currency,
                "limit": limit,
                "order": order,
                "searchType": searchType,
            }
    
    fromDate: MetaOapg.properties.fromDate
    minAmount: MetaOapg.properties.minAmount
    operations: MetaOapg.properties.operations
    sortType: MetaOapg.properties.sortType
    sortOrder: MetaOapg.properties.sortOrder
    toDate: MetaOapg.properties.toDate
    currency: MetaOapg.properties.currency
    state: MetaOapg.properties.state
    terminal: MetaOapg.properties.terminal
    maxAmount: MetaOapg.properties.maxAmount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminal"]) -> MetaOapg.properties.terminal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortType"]) -> MetaOapg.properties.sortType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operations"]) -> MetaOapg.properties.operations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minAmount"]) -> MetaOapg.properties.minAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxAmount"]) -> MetaOapg.properties.maxAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromDate"]) -> MetaOapg.properties.fromDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toDate"]) -> MetaOapg.properties.toDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["searchType"]) -> MetaOapg.properties.searchType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["terminal", "sortType", "sortOrder", "operations", "minAmount", "maxAmount", "state", "fromDate", "toDate", "currency", "limit", "order", "searchType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminal"]) -> MetaOapg.properties.terminal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortType"]) -> MetaOapg.properties.sortType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operations"]) -> MetaOapg.properties.operations: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minAmount"]) -> MetaOapg.properties.minAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxAmount"]) -> MetaOapg.properties.maxAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromDate"]) -> MetaOapg.properties.fromDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toDate"]) -> MetaOapg.properties.toDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["searchType"]) -> typing.Union[MetaOapg.properties.searchType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["terminal", "sortType", "sortOrder", "operations", "minAmount", "maxAmount", "state", "fromDate", "toDate", "currency", "limit", "order", "searchType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        fromDate: typing.Union[MetaOapg.properties.fromDate, str, ],
        minAmount: typing.Union[MetaOapg.properties.minAmount, decimal.Decimal, int, ],
        operations: typing.Union[MetaOapg.properties.operations, list, tuple, ],
        sortType: typing.Union[MetaOapg.properties.sortType, decimal.Decimal, int, ],
        sortOrder: typing.Union[MetaOapg.properties.sortOrder, str, ],
        toDate: typing.Union[MetaOapg.properties.toDate, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        state: typing.Union[MetaOapg.properties.state, decimal.Decimal, int, ],
        terminal: typing.Union[MetaOapg.properties.terminal, decimal.Decimal, int, ],
        maxAmount: typing.Union[MetaOapg.properties.maxAmount, decimal.Decimal, int, ],
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        order: typing.Union[MetaOapg.properties.order, str, schemas.Unset] = schemas.unset,
        searchType: typing.Union[MetaOapg.properties.searchType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            fromDate=fromDate,
            minAmount=minAmount,
            operations=operations,
            sortType=sortType,
            sortOrder=sortOrder,
            toDate=toDate,
            currency=currency,
            state=state,
            terminal=terminal,
            maxAmount=maxAmount,
            limit=limit,
            order=order,
            searchType=searchType,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            errorCode = schemas.IntSchema
            
            
            class operations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                paycometId = schemas.IntSchema
                                operationId = schemas.IntSchema
                                methodId = schemas.IntSchema
                                timestamp = schemas.StrSchema
                                settlementDate = schemas.StrSchema
                                order = schemas.StrSchema
                                operationType = schemas.IntSchema
                                operationName = schemas.StrSchema
                                state = schemas.IntSchema
                                stateName = schemas.StrSchema
                                response = schemas.StrSchema
                                terminal = schemas.IntSchema
                                terminalName = schemas.StrSchema
                                user = schemas.StrSchema
                                amount = schemas.StrSchema
                                currency = schemas.StrSchema
                                amountDisplay = schemas.StrSchema
                                errorCode = schemas.IntSchema
                                errorDescription = schemas.StrSchema
                                feeEuro = schemas.NumberSchema
                                feePercent = schemas.NumberSchema
                                originalIp = schemas.StrSchema
                                pan = schemas.StrSchema
                                scoring = schemas.StrSchema
                                merchantBank = schemas.StrSchema
                                bicCode = schemas.StrSchema
                                productDescription = schemas.StrSchema
                                cardType = schemas.StrSchema
                                cardCategory = schemas.StrSchema
                                cardBrand = schemas.StrSchema
                                cardCountry = schemas.StrSchema
                                secure = schemas.StrSchema
                                splitId = schemas.IntSchema
                                issuerBank = schemas.StrSchema
                                authCode = schemas.StrSchema
                                __annotations__ = {
                                    "paycometId": paycometId,
                                    "operationId": operationId,
                                    "methodId": methodId,
                                    "timestamp": timestamp,
                                    "settlementDate": settlementDate,
                                    "order": order,
                                    "operationType": operationType,
                                    "operationName": operationName,
                                    "state": state,
                                    "stateName": stateName,
                                    "response": response,
                                    "terminal": terminal,
                                    "terminalName": terminalName,
                                    "user": user,
                                    "amount": amount,
                                    "currency": currency,
                                    "amountDisplay": amountDisplay,
                                    "errorCode": errorCode,
                                    "errorDescription": errorDescription,
                                    "feeEuro": feeEuro,
                                    "feePercent": feePercent,
                                    "originalIp": originalIp,
                                    "pan": pan,
                                    "scoring": scoring,
                                    "merchantBank": merchantBank,
                                    "bicCode": bicCode,
                                    "productDescription": productDescription,
                                    "cardType": cardType,
                                    "cardCategory": cardCategory,
                                    "cardBrand": cardBrand,
                                    "cardCountry": cardCountry,
                                    "secure": secure,
                                    "splitId": splitId,
                                    "issuerBank": issuerBank,
                                    "authCode": authCode,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["paycometId"]) -> MetaOapg.properties.paycometId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["operationId"]) -> MetaOapg.properties.operationId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["methodId"]) -> MetaOapg.properties.methodId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["settlementDate"]) -> MetaOapg.properties.settlementDate: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["operationType"]) -> MetaOapg.properties.operationType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["operationName"]) -> MetaOapg.properties.operationName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["stateName"]) -> MetaOapg.properties.stateName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["response"]) -> MetaOapg.properties.response: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["terminal"]) -> MetaOapg.properties.terminal: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["terminalName"]) -> MetaOapg.properties.terminalName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["amountDisplay"]) -> MetaOapg.properties.amountDisplay: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["errorDescription"]) -> MetaOapg.properties.errorDescription: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["feeEuro"]) -> MetaOapg.properties.feeEuro: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["feePercent"]) -> MetaOapg.properties.feePercent: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["originalIp"]) -> MetaOapg.properties.originalIp: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["pan"]) -> MetaOapg.properties.pan: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["scoring"]) -> MetaOapg.properties.scoring: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["merchantBank"]) -> MetaOapg.properties.merchantBank: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["bicCode"]) -> MetaOapg.properties.bicCode: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["productDescription"]) -> MetaOapg.properties.productDescription: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardType"]) -> MetaOapg.properties.cardType: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardCategory"]) -> MetaOapg.properties.cardCategory: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardBrand"]) -> MetaOapg.properties.cardBrand: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cardCountry"]) -> MetaOapg.properties.cardCountry: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["secure"]) -> MetaOapg.properties.secure: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["splitId"]) -> MetaOapg.properties.splitId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["issuerBank"]) -> MetaOapg.properties.issuerBank: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["authCode"]) -> MetaOapg.properties.authCode: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["paycometId", "operationId", "methodId", "timestamp", "settlementDate", "order", "operationType", "operationName", "state", "stateName", "response", "terminal", "terminalName", "user", "amount", "currency", "amountDisplay", "errorCode", "errorDescription", "feeEuro", "feePercent", "originalIp", "pan", "scoring", "merchantBank", "bicCode", "productDescription", "cardType", "cardCategory", "cardBrand", "cardCountry", "secure", "splitId", "issuerBank", "authCode", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["paycometId"]) -> typing.Union[MetaOapg.properties.paycometId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["operationId"]) -> typing.Union[MetaOapg.properties.operationId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["methodId"]) -> typing.Union[MetaOapg.properties.methodId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["settlementDate"]) -> typing.Union[MetaOapg.properties.settlementDate, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["operationType"]) -> typing.Union[MetaOapg.properties.operationType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["operationName"]) -> typing.Union[MetaOapg.properties.operationName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["stateName"]) -> typing.Union[MetaOapg.properties.stateName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["response"]) -> typing.Union[MetaOapg.properties.response, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["terminal"]) -> typing.Union[MetaOapg.properties.terminal, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["terminalName"]) -> typing.Union[MetaOapg.properties.terminalName, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union[MetaOapg.properties.user, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["amountDisplay"]) -> typing.Union[MetaOapg.properties.amountDisplay, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> typing.Union[MetaOapg.properties.errorCode, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["errorDescription"]) -> typing.Union[MetaOapg.properties.errorDescription, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["feeEuro"]) -> typing.Union[MetaOapg.properties.feeEuro, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["feePercent"]) -> typing.Union[MetaOapg.properties.feePercent, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["originalIp"]) -> typing.Union[MetaOapg.properties.originalIp, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["pan"]) -> typing.Union[MetaOapg.properties.pan, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["scoring"]) -> typing.Union[MetaOapg.properties.scoring, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["merchantBank"]) -> typing.Union[MetaOapg.properties.merchantBank, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["bicCode"]) -> typing.Union[MetaOapg.properties.bicCode, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["productDescription"]) -> typing.Union[MetaOapg.properties.productDescription, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardType"]) -> typing.Union[MetaOapg.properties.cardType, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardCategory"]) -> typing.Union[MetaOapg.properties.cardCategory, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardBrand"]) -> typing.Union[MetaOapg.properties.cardBrand, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cardCountry"]) -> typing.Union[MetaOapg.properties.cardCountry, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["secure"]) -> typing.Union[MetaOapg.properties.secure, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["splitId"]) -> typing.Union[MetaOapg.properties.splitId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["issuerBank"]) -> typing.Union[MetaOapg.properties.issuerBank, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["authCode"]) -> typing.Union[MetaOapg.properties.authCode, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["paycometId", "operationId", "methodId", "timestamp", "settlementDate", "order", "operationType", "operationName", "state", "stateName", "response", "terminal", "terminalName", "user", "amount", "currency", "amountDisplay", "errorCode", "errorDescription", "feeEuro", "feePercent", "originalIp", "pan", "scoring", "merchantBank", "bicCode", "productDescription", "cardType", "cardCategory", "cardBrand", "cardCountry", "secure", "splitId", "issuerBank", "authCode", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            paycometId: typing.Union[MetaOapg.properties.paycometId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            operationId: typing.Union[MetaOapg.properties.operationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            methodId: typing.Union[MetaOapg.properties.methodId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            timestamp: typing.Union[MetaOapg.properties.timestamp, str, schemas.Unset] = schemas.unset,
                            settlementDate: typing.Union[MetaOapg.properties.settlementDate, str, schemas.Unset] = schemas.unset,
                            order: typing.Union[MetaOapg.properties.order, str, schemas.Unset] = schemas.unset,
                            operationType: typing.Union[MetaOapg.properties.operationType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            operationName: typing.Union[MetaOapg.properties.operationName, str, schemas.Unset] = schemas.unset,
                            state: typing.Union[MetaOapg.properties.state, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            stateName: typing.Union[MetaOapg.properties.stateName, str, schemas.Unset] = schemas.unset,
                            response: typing.Union[MetaOapg.properties.response, str, schemas.Unset] = schemas.unset,
                            terminal: typing.Union[MetaOapg.properties.terminal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            terminalName: typing.Union[MetaOapg.properties.terminalName, str, schemas.Unset] = schemas.unset,
                            user: typing.Union[MetaOapg.properties.user, str, schemas.Unset] = schemas.unset,
                            amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
                            currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
                            amountDisplay: typing.Union[MetaOapg.properties.amountDisplay, str, schemas.Unset] = schemas.unset,
                            errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            errorDescription: typing.Union[MetaOapg.properties.errorDescription, str, schemas.Unset] = schemas.unset,
                            feeEuro: typing.Union[MetaOapg.properties.feeEuro, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            feePercent: typing.Union[MetaOapg.properties.feePercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            originalIp: typing.Union[MetaOapg.properties.originalIp, str, schemas.Unset] = schemas.unset,
                            pan: typing.Union[MetaOapg.properties.pan, str, schemas.Unset] = schemas.unset,
                            scoring: typing.Union[MetaOapg.properties.scoring, str, schemas.Unset] = schemas.unset,
                            merchantBank: typing.Union[MetaOapg.properties.merchantBank, str, schemas.Unset] = schemas.unset,
                            bicCode: typing.Union[MetaOapg.properties.bicCode, str, schemas.Unset] = schemas.unset,
                            productDescription: typing.Union[MetaOapg.properties.productDescription, str, schemas.Unset] = schemas.unset,
                            cardType: typing.Union[MetaOapg.properties.cardType, str, schemas.Unset] = schemas.unset,
                            cardCategory: typing.Union[MetaOapg.properties.cardCategory, str, schemas.Unset] = schemas.unset,
                            cardBrand: typing.Union[MetaOapg.properties.cardBrand, str, schemas.Unset] = schemas.unset,
                            cardCountry: typing.Union[MetaOapg.properties.cardCountry, str, schemas.Unset] = schemas.unset,
                            secure: typing.Union[MetaOapg.properties.secure, str, schemas.Unset] = schemas.unset,
                            splitId: typing.Union[MetaOapg.properties.splitId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            issuerBank: typing.Union[MetaOapg.properties.issuerBank, str, schemas.Unset] = schemas.unset,
                            authCode: typing.Union[MetaOapg.properties.authCode, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                paycometId=paycometId,
                                operationId=operationId,
                                methodId=methodId,
                                timestamp=timestamp,
                                settlementDate=settlementDate,
                                order=order,
                                operationType=operationType,
                                operationName=operationName,
                                state=state,
                                stateName=stateName,
                                response=response,
                                terminal=terminal,
                                terminalName=terminalName,
                                user=user,
                                amount=amount,
                                currency=currency,
                                amountDisplay=amountDisplay,
                                errorCode=errorCode,
                                errorDescription=errorDescription,
                                feeEuro=feeEuro,
                                feePercent=feePercent,
                                originalIp=originalIp,
                                pan=pan,
                                scoring=scoring,
                                merchantBank=merchantBank,
                                bicCode=bicCode,
                                productDescription=productDescription,
                                cardType=cardType,
                                cardCategory=cardCategory,
                                cardBrand=cardBrand,
                                cardCountry=cardCountry,
                                secure=secure,
                                splitId=splitId,
                                issuerBank=issuerBank,
                                authCode=authCode,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'operations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "errorCode": errorCode,
                "operations": operations,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operations"]) -> MetaOapg.properties.operations: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errorCode", "operations", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> typing.Union[MetaOapg.properties.errorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operations"]) -> typing.Union[MetaOapg.properties.operations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errorCode", "operations", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        operations: typing.Union[MetaOapg.properties.operations, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            errorCode=errorCode,
            operations=operations,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor422ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            errorCode = schemas.IntSchema
            
            
            class error(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        message = schemas.StrSchema
                        
                        
                        class detail(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'detail':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "message": message,
                            "detail": detail,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["message", "detail", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message", "detail", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
                    detail: typing.Union[MetaOapg.properties.detail, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'error':
                    return super().__new__(
                        cls,
                        *_args,
                        message=message,
                        detail=detail,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "errorCode": errorCode,
                "error": error,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errorCode", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> typing.Union[MetaOapg.properties.errorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errorCode", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor422ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            errorCode=errorCode,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor422ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '422': _response_for_422,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _operation_search_oapg(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _operation_search_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def _operation_search_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _operation_search_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _operation_search_oapg(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Search orders
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_paycomet_api_token,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_any_type.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class OperationSearch(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def operation_search(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def operation_search(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def operation_search(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def operation_search(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def operation_search(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._operation_search_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def post(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def post(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def post(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def post(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._operation_search_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


