# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from paycomet_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paycomet_client import schemas  # noqa: F401

from . import path

# Header params
PAYCOMETAPITOKENSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
        'PAYCOMET-API-TOKEN': typing.Union[PAYCOMETAPITOKENSchema, str, ],
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_paycomet_api_token = api_client.HeaderParameter(
    name="PAYCOMET-API-TOKEN",
    style=api_client.ParameterStyle.SIMPLE,
    schema=PAYCOMETAPITOKENSchema,
    required=True,
)
# body param


class SchemaForRequestBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "ivrMerchantLanguage",
            "ivrMerchantCurrency",
            "ivrProviderId",
            "ivrTransactionType",
            "ivrMerchantOrder",
            "ivrStationId",
            "terminal",
            "ivrMerchantAmount",
        }
        
        class properties:
            terminal = schemas.IntSchema
            ivrProviderId = schemas.IntSchema
            ivrStationId = schemas.StrSchema
            ivrMerchantAmount = schemas.IntSchema
            ivrMerchantCurrency = schemas.StrSchema
            ivrMerchantOrder = schemas.StrSchema
            ivrMerchantLanguage = schemas.StrSchema
            ivrTransactionType = schemas.StrSchema
            ivrMerchantConcept = schemas.StrSchema
            ivrSubscriptionStartdate = schemas.StrSchema
            ivrSubscriptionEnddate = schemas.StrSchema
            ivrSubscriptionPeriodicity = schemas.IntSchema
            ivrMaxRetries = schemas.IntSchema
            ivrSessionTimeout = schemas.IntSchema
            ivrCallbackStationTimeout = schemas.StrSchema
            ivrCallbackStationOk = schemas.StrSchema
            ivrCallbackStationKo = schemas.StrSchema
            ivrCallerPhoneNumber = schemas.StrSchema
            ivrProviderData01 = schemas.StrSchema
            vrProviderData02 = schemas.StrSchema
            ivrProviderData03 = schemas.StrSchema
            ivrProviderData04 = schemas.StrSchema
            ivrProviderData05 = schemas.StrSchema
            __annotations__ = {
                "terminal": terminal,
                "ivrProviderId": ivrProviderId,
                "ivrStationId": ivrStationId,
                "ivrMerchantAmount": ivrMerchantAmount,
                "ivrMerchantCurrency": ivrMerchantCurrency,
                "ivrMerchantOrder": ivrMerchantOrder,
                "ivrMerchantLanguage": ivrMerchantLanguage,
                "ivrTransactionType": ivrTransactionType,
                "ivrMerchantConcept": ivrMerchantConcept,
                "ivrSubscriptionStartdate": ivrSubscriptionStartdate,
                "ivrSubscriptionEnddate": ivrSubscriptionEnddate,
                "ivrSubscriptionPeriodicity": ivrSubscriptionPeriodicity,
                "ivrMaxRetries": ivrMaxRetries,
                "ivrSessionTimeout": ivrSessionTimeout,
                "ivrCallbackStationTimeout": ivrCallbackStationTimeout,
                "ivrCallbackStationOk": ivrCallbackStationOk,
                "ivrCallbackStationKo": ivrCallbackStationKo,
                "ivrCallerPhoneNumber": ivrCallerPhoneNumber,
                "ivrProviderData01": ivrProviderData01,
                "vrProviderData02": vrProviderData02,
                "ivrProviderData03": ivrProviderData03,
                "ivrProviderData04": ivrProviderData04,
                "ivrProviderData05": ivrProviderData05,
            }
    
    ivrMerchantLanguage: MetaOapg.properties.ivrMerchantLanguage
    ivrMerchantCurrency: MetaOapg.properties.ivrMerchantCurrency
    ivrProviderId: MetaOapg.properties.ivrProviderId
    ivrTransactionType: MetaOapg.properties.ivrTransactionType
    ivrMerchantOrder: MetaOapg.properties.ivrMerchantOrder
    ivrStationId: MetaOapg.properties.ivrStationId
    terminal: MetaOapg.properties.terminal
    ivrMerchantAmount: MetaOapg.properties.ivrMerchantAmount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminal"]) -> MetaOapg.properties.terminal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrProviderId"]) -> MetaOapg.properties.ivrProviderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrStationId"]) -> MetaOapg.properties.ivrStationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrMerchantAmount"]) -> MetaOapg.properties.ivrMerchantAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrMerchantCurrency"]) -> MetaOapg.properties.ivrMerchantCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrMerchantOrder"]) -> MetaOapg.properties.ivrMerchantOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrMerchantLanguage"]) -> MetaOapg.properties.ivrMerchantLanguage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrTransactionType"]) -> MetaOapg.properties.ivrTransactionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrMerchantConcept"]) -> MetaOapg.properties.ivrMerchantConcept: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrSubscriptionStartdate"]) -> MetaOapg.properties.ivrSubscriptionStartdate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrSubscriptionEnddate"]) -> MetaOapg.properties.ivrSubscriptionEnddate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrSubscriptionPeriodicity"]) -> MetaOapg.properties.ivrSubscriptionPeriodicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrMaxRetries"]) -> MetaOapg.properties.ivrMaxRetries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrSessionTimeout"]) -> MetaOapg.properties.ivrSessionTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrCallbackStationTimeout"]) -> MetaOapg.properties.ivrCallbackStationTimeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrCallbackStationOk"]) -> MetaOapg.properties.ivrCallbackStationOk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrCallbackStationKo"]) -> MetaOapg.properties.ivrCallbackStationKo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrCallerPhoneNumber"]) -> MetaOapg.properties.ivrCallerPhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrProviderData01"]) -> MetaOapg.properties.ivrProviderData01: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vrProviderData02"]) -> MetaOapg.properties.vrProviderData02: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrProviderData03"]) -> MetaOapg.properties.ivrProviderData03: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrProviderData04"]) -> MetaOapg.properties.ivrProviderData04: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrProviderData05"]) -> MetaOapg.properties.ivrProviderData05: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["terminal", "ivrProviderId", "ivrStationId", "ivrMerchantAmount", "ivrMerchantCurrency", "ivrMerchantOrder", "ivrMerchantLanguage", "ivrTransactionType", "ivrMerchantConcept", "ivrSubscriptionStartdate", "ivrSubscriptionEnddate", "ivrSubscriptionPeriodicity", "ivrMaxRetries", "ivrSessionTimeout", "ivrCallbackStationTimeout", "ivrCallbackStationOk", "ivrCallbackStationKo", "ivrCallerPhoneNumber", "ivrProviderData01", "vrProviderData02", "ivrProviderData03", "ivrProviderData04", "ivrProviderData05", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminal"]) -> MetaOapg.properties.terminal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrProviderId"]) -> MetaOapg.properties.ivrProviderId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrStationId"]) -> MetaOapg.properties.ivrStationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrMerchantAmount"]) -> MetaOapg.properties.ivrMerchantAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrMerchantCurrency"]) -> MetaOapg.properties.ivrMerchantCurrency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrMerchantOrder"]) -> MetaOapg.properties.ivrMerchantOrder: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrMerchantLanguage"]) -> MetaOapg.properties.ivrMerchantLanguage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrTransactionType"]) -> MetaOapg.properties.ivrTransactionType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrMerchantConcept"]) -> typing.Union[MetaOapg.properties.ivrMerchantConcept, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrSubscriptionStartdate"]) -> typing.Union[MetaOapg.properties.ivrSubscriptionStartdate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrSubscriptionEnddate"]) -> typing.Union[MetaOapg.properties.ivrSubscriptionEnddate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrSubscriptionPeriodicity"]) -> typing.Union[MetaOapg.properties.ivrSubscriptionPeriodicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrMaxRetries"]) -> typing.Union[MetaOapg.properties.ivrMaxRetries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrSessionTimeout"]) -> typing.Union[MetaOapg.properties.ivrSessionTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrCallbackStationTimeout"]) -> typing.Union[MetaOapg.properties.ivrCallbackStationTimeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrCallbackStationOk"]) -> typing.Union[MetaOapg.properties.ivrCallbackStationOk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrCallbackStationKo"]) -> typing.Union[MetaOapg.properties.ivrCallbackStationKo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrCallerPhoneNumber"]) -> typing.Union[MetaOapg.properties.ivrCallerPhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrProviderData01"]) -> typing.Union[MetaOapg.properties.ivrProviderData01, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vrProviderData02"]) -> typing.Union[MetaOapg.properties.vrProviderData02, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrProviderData03"]) -> typing.Union[MetaOapg.properties.ivrProviderData03, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrProviderData04"]) -> typing.Union[MetaOapg.properties.ivrProviderData04, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrProviderData05"]) -> typing.Union[MetaOapg.properties.ivrProviderData05, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["terminal", "ivrProviderId", "ivrStationId", "ivrMerchantAmount", "ivrMerchantCurrency", "ivrMerchantOrder", "ivrMerchantLanguage", "ivrTransactionType", "ivrMerchantConcept", "ivrSubscriptionStartdate", "ivrSubscriptionEnddate", "ivrSubscriptionPeriodicity", "ivrMaxRetries", "ivrSessionTimeout", "ivrCallbackStationTimeout", "ivrCallbackStationOk", "ivrCallbackStationKo", "ivrCallerPhoneNumber", "ivrProviderData01", "vrProviderData02", "ivrProviderData03", "ivrProviderData04", "ivrProviderData05", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ivrMerchantLanguage: typing.Union[MetaOapg.properties.ivrMerchantLanguage, str, ],
        ivrMerchantCurrency: typing.Union[MetaOapg.properties.ivrMerchantCurrency, str, ],
        ivrProviderId: typing.Union[MetaOapg.properties.ivrProviderId, decimal.Decimal, int, ],
        ivrTransactionType: typing.Union[MetaOapg.properties.ivrTransactionType, str, ],
        ivrMerchantOrder: typing.Union[MetaOapg.properties.ivrMerchantOrder, str, ],
        ivrStationId: typing.Union[MetaOapg.properties.ivrStationId, str, ],
        terminal: typing.Union[MetaOapg.properties.terminal, decimal.Decimal, int, ],
        ivrMerchantAmount: typing.Union[MetaOapg.properties.ivrMerchantAmount, decimal.Decimal, int, ],
        ivrMerchantConcept: typing.Union[MetaOapg.properties.ivrMerchantConcept, str, schemas.Unset] = schemas.unset,
        ivrSubscriptionStartdate: typing.Union[MetaOapg.properties.ivrSubscriptionStartdate, str, schemas.Unset] = schemas.unset,
        ivrSubscriptionEnddate: typing.Union[MetaOapg.properties.ivrSubscriptionEnddate, str, schemas.Unset] = schemas.unset,
        ivrSubscriptionPeriodicity: typing.Union[MetaOapg.properties.ivrSubscriptionPeriodicity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ivrMaxRetries: typing.Union[MetaOapg.properties.ivrMaxRetries, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ivrSessionTimeout: typing.Union[MetaOapg.properties.ivrSessionTimeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ivrCallbackStationTimeout: typing.Union[MetaOapg.properties.ivrCallbackStationTimeout, str, schemas.Unset] = schemas.unset,
        ivrCallbackStationOk: typing.Union[MetaOapg.properties.ivrCallbackStationOk, str, schemas.Unset] = schemas.unset,
        ivrCallbackStationKo: typing.Union[MetaOapg.properties.ivrCallbackStationKo, str, schemas.Unset] = schemas.unset,
        ivrCallerPhoneNumber: typing.Union[MetaOapg.properties.ivrCallerPhoneNumber, str, schemas.Unset] = schemas.unset,
        ivrProviderData01: typing.Union[MetaOapg.properties.ivrProviderData01, str, schemas.Unset] = schemas.unset,
        vrProviderData02: typing.Union[MetaOapg.properties.vrProviderData02, str, schemas.Unset] = schemas.unset,
        ivrProviderData03: typing.Union[MetaOapg.properties.ivrProviderData03, str, schemas.Unset] = schemas.unset,
        ivrProviderData04: typing.Union[MetaOapg.properties.ivrProviderData04, str, schemas.Unset] = schemas.unset,
        ivrProviderData05: typing.Union[MetaOapg.properties.ivrProviderData05, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            ivrMerchantLanguage=ivrMerchantLanguage,
            ivrMerchantCurrency=ivrMerchantCurrency,
            ivrProviderId=ivrProviderId,
            ivrTransactionType=ivrTransactionType,
            ivrMerchantOrder=ivrMerchantOrder,
            ivrStationId=ivrStationId,
            terminal=terminal,
            ivrMerchantAmount=ivrMerchantAmount,
            ivrMerchantConcept=ivrMerchantConcept,
            ivrSubscriptionStartdate=ivrSubscriptionStartdate,
            ivrSubscriptionEnddate=ivrSubscriptionEnddate,
            ivrSubscriptionPeriodicity=ivrSubscriptionPeriodicity,
            ivrMaxRetries=ivrMaxRetries,
            ivrSessionTimeout=ivrSessionTimeout,
            ivrCallbackStationTimeout=ivrCallbackStationTimeout,
            ivrCallbackStationOk=ivrCallbackStationOk,
            ivrCallbackStationKo=ivrCallbackStationKo,
            ivrCallerPhoneNumber=ivrCallerPhoneNumber,
            ivrProviderData01=ivrProviderData01,
            vrProviderData02=vrProviderData02,
            ivrProviderData03=ivrProviderData03,
            ivrProviderData04=ivrProviderData04,
            ivrProviderData05=ivrProviderData05,
            _configuration=_configuration,
            **kwargs,
        )


request_body_any_type = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            errorCode = schemas.IntSchema
            ivrResponse = schemas.BoolSchema
            __annotations__ = {
                "errorCode": errorCode,
                "ivrResponse": ivrResponse,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ivrResponse"]) -> MetaOapg.properties.ivrResponse: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errorCode", "ivrResponse", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> typing.Union[MetaOapg.properties.errorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ivrResponse"]) -> typing.Union[MetaOapg.properties.ivrResponse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errorCode", "ivrResponse", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ivrResponse: typing.Union[MetaOapg.properties.ivrResponse, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            errorCode=errorCode,
            ivrResponse=ivrResponse,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor422ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            errorCode = schemas.IntSchema
            
            
            class error(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        message = schemas.StrSchema
                        
                        
                        class detail(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'detail':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "message": message,
                            "detail": detail,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["detail"]) -> MetaOapg.properties.detail: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["message", "detail", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["detail"]) -> typing.Union[MetaOapg.properties.detail, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message", "detail", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
                    detail: typing.Union[MetaOapg.properties.detail, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'error':
                    return super().__new__(
                        cls,
                        *_args,
                        message=message,
                        detail=detail,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "errorCode": errorCode,
                "error": error,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errorCode", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> typing.Union[MetaOapg.properties.errorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errorCode", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor422ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *_args,
            errorCode=errorCode,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor422ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '422': _response_for_422,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_session_oapg(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_session_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def _get_session_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_session_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_session_oapg(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Creates an IVR session
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_paycomet_api_token,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_any_type.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class GetSession(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_session(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_session(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def get_session(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_session(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_session(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_session_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        content_type: typing_extensions.Literal["application/json"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def post(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...


    @typing.overload
    def post(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def post(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def post(
        self,
        content_type: str = 'application/json',
        body: typing.Union[SchemaForRequestBodyApplicationJson, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_session_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


