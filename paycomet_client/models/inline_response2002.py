# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pan': 'str',
        'card_brand': 'str',
        'card_type': 'str',
        'card_i_country_iso3': 'str',
        'expiry_date': 'str',
        'card_hash': 'str',
        'card_category': 'str',
        'sepa_card': 'int',
        'psd2_card': 'str',
        'token_cof': 'int',
        'eea_card': 'str',
        'error_code': 'int'
    }

    attribute_map = {
        'pan': 'pan',
        'card_brand': 'cardBrand',
        'card_type': 'cardType',
        'card_i_country_iso3': 'cardICountryISO3',
        'expiry_date': 'expiryDate',
        'card_hash': 'cardHash',
        'card_category': 'cardCategory',
        'sepa_card': 'sepaCard',
        'psd2_card': 'psd2Card',
        'token_cof': 'tokenCOF',
        'eea_card': 'eeaCard',
        'error_code': 'errorCode'
    }

    def __init__(self, pan=None, card_brand=None, card_type=None, card_i_country_iso3=None, expiry_date=None, card_hash=None, card_category=None, sepa_card=None, psd2_card=None, token_cof=None, eea_card=None, error_code=None):  # noqa: E501
        """InlineResponse2002 - a model defined in Swagger"""  # noqa: E501
        self._pan = None
        self._card_brand = None
        self._card_type = None
        self._card_i_country_iso3 = None
        self._expiry_date = None
        self._card_hash = None
        self._card_category = None
        self._sepa_card = None
        self._psd2_card = None
        self._token_cof = None
        self._eea_card = None
        self._error_code = None
        self.discriminator = None
        if pan is not None:
            self.pan = pan
        if card_brand is not None:
            self.card_brand = card_brand
        if card_type is not None:
            self.card_type = card_type
        if card_i_country_iso3 is not None:
            self.card_i_country_iso3 = card_i_country_iso3
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if card_hash is not None:
            self.card_hash = card_hash
        if card_category is not None:
            self.card_category = card_category
        if sepa_card is not None:
            self.sepa_card = sepa_card
        if psd2_card is not None:
            self.psd2_card = psd2_card
        if token_cof is not None:
            self.token_cof = token_cof
        if eea_card is not None:
            self.eea_card = eea_card
        if error_code is not None:
            self.error_code = error_code

    @property
    def pan(self):
        """Gets the pan of this InlineResponse2002.  # noqa: E501

        Card number, without any spaces or dashes. Only the last four digits will be returned. The rest will be masked with X  # noqa: E501

        :return: The pan of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this InlineResponse2002.

        Card number, without any spaces or dashes. Only the last four digits will be returned. The rest will be masked with X  # noqa: E501

        :param pan: The pan of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._pan = pan

    @property
    def card_brand(self):
        """Gets the card_brand of this InlineResponse2002.  # noqa: E501

        Card brand. If it can be identified, information on the card brand will be sent (Visa, MasterCard, American Express, etc). Otherwise, the field will be returned blank.  # noqa: E501

        :return: The card_brand of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this InlineResponse2002.

        Card brand. If it can be identified, information on the card brand will be sent (Visa, MasterCard, American Express, etc). Otherwise, the field will be returned blank.  # noqa: E501

        :param card_brand: The card_brand of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._card_brand = card_brand

    @property
    def card_type(self):
        """Gets the card_type of this InlineResponse2002.  # noqa: E501

        Type of card. If it can be identified, information on the type of card will be sent (DEBIT, CREDIT, etc). Otherwise, the field will be returned blank.  # noqa: E501

        :return: The card_type of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this InlineResponse2002.

        Type of card. If it can be identified, information on the type of card will be sent (DEBIT, CREDIT, etc). Otherwise, the field will be returned blank.  # noqa: E501

        :param card_type: The card_type of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def card_i_country_iso3(self):
        """Gets the card_i_country_iso3 of this InlineResponse2002.  # noqa: E501

        ISO3 Code the country of the issuer of the card. If it can be identified, the ISO3 Code of the country of the issuer of the card will be sent. Otherwise, the field will be returned blank.  # noqa: E501

        :return: The card_i_country_iso3 of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._card_i_country_iso3

    @card_i_country_iso3.setter
    def card_i_country_iso3(self, card_i_country_iso3):
        """Sets the card_i_country_iso3 of this InlineResponse2002.

        ISO3 Code the country of the issuer of the card. If it can be identified, the ISO3 Code of the country of the issuer of the card will be sent. Otherwise, the field will be returned blank.  # noqa: E501

        :param card_i_country_iso3: The card_i_country_iso3 of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._card_i_country_iso3 = card_i_country_iso3

    @property
    def expiry_date(self):
        """Gets the expiry_date of this InlineResponse2002.  # noqa: E501

        Expiry date of the card expressed in the format YYYY/MM  # noqa: E501

        :return: The expiry_date of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this InlineResponse2002.

        Expiry date of the card expressed in the format YYYY/MM  # noqa: E501

        :param expiry_date: The expiry_date of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def card_hash(self):
        """Gets the card_hash of this InlineResponse2002.  # noqa: E501

        Hash unique credit card id.  # noqa: E501

        :return: The card_hash of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._card_hash

    @card_hash.setter
    def card_hash(self, card_hash):
        """Sets the card_hash of this InlineResponse2002.

        Hash unique credit card id.  # noqa: E501

        :param card_hash: The card_hash of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._card_hash = card_hash

    @property
    def card_category(self):
        """Gets the card_category of this InlineResponse2002.  # noqa: E501

        Card category.  # noqa: E501

        :return: The card_category of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._card_category

    @card_category.setter
    def card_category(self, card_category):
        """Sets the card_category of this InlineResponse2002.

        Card category.  # noqa: E501

        :param card_category: The card_category of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._card_category = card_category

    @property
    def sepa_card(self):
        """Gets the sepa_card of this InlineResponse2002.  # noqa: E501

        Card in SEPA country.  # noqa: E501

        :return: The sepa_card of this InlineResponse2002.  # noqa: E501
        :rtype: int
        """
        return self._sepa_card

    @sepa_card.setter
    def sepa_card(self, sepa_card):
        """Sets the sepa_card of this InlineResponse2002.

        Card in SEPA country.  # noqa: E501

        :param sepa_card: The sepa_card of this InlineResponse2002.  # noqa: E501
        :type: int
        """

        self._sepa_card = sepa_card

    @property
    def psd2_card(self):
        """Gets the psd2_card of this InlineResponse2002.  # noqa: E501

        Express if card has PSD2 information (Y is a PSD2 Card, N is not and NA is not available).  # noqa: E501

        :return: The psd2_card of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._psd2_card

    @psd2_card.setter
    def psd2_card(self, psd2_card):
        """Sets the psd2_card of this InlineResponse2002.

        Express if card has PSD2 information (Y is a PSD2 Card, N is not and NA is not available).  # noqa: E501

        :param psd2_card: The psd2_card of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._psd2_card = psd2_card

    @property
    def token_cof(self):
        """Gets the token_cof of this InlineResponse2002.  # noqa: E501

        Express if card has COF registered.  # noqa: E501

        :return: The token_cof of this InlineResponse2002.  # noqa: E501
        :rtype: int
        """
        return self._token_cof

    @token_cof.setter
    def token_cof(self, token_cof):
        """Sets the token_cof of this InlineResponse2002.

        Express if card has COF registered.  # noqa: E501

        :param token_cof: The token_cof of this InlineResponse2002.  # noqa: E501
        :type: int
        """

        self._token_cof = token_cof

    @property
    def eea_card(self):
        """Gets the eea_card of this InlineResponse2002.  # noqa: E501

        Express if card country belongs to EEA zone or not. (Y/N or NA if not available).  # noqa: E501

        :return: The eea_card of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._eea_card

    @eea_card.setter
    def eea_card(self, eea_card):
        """Sets the eea_card of this InlineResponse2002.

        Express if card country belongs to EEA zone or not. (Y/N or NA if not available).  # noqa: E501

        :param eea_card: The eea_card of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._eea_card = eea_card

    @property
    def error_code(self):
        """Gets the error_code of this InlineResponse2002.  # noqa: E501


        :return: The error_code of this InlineResponse2002.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this InlineResponse2002.


        :param error_code: The error_code of this InlineResponse2002.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
