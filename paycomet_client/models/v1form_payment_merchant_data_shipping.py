# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1formPaymentMerchantDataShipping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ship_addr_city': 'str',
        'ship_addr_country': 'str',
        'ship_addr_line1': 'str',
        'ship_addr_line2': 'str',
        'ship_addr_line3': 'str',
        'ship_addr_post_code': 'str',
        'ship_addr_state': 'str'
    }

    attribute_map = {
        'ship_addr_city': 'shipAddrCity',
        'ship_addr_country': 'shipAddrCountry',
        'ship_addr_line1': 'shipAddrLine1',
        'ship_addr_line2': 'shipAddrLine2',
        'ship_addr_line3': 'shipAddrLine3',
        'ship_addr_post_code': 'shipAddrPostCode',
        'ship_addr_state': 'shipAddrState'
    }

    def __init__(self, ship_addr_city=None, ship_addr_country=None, ship_addr_line1=None, ship_addr_line2=None, ship_addr_line3=None, ship_addr_post_code=None, ship_addr_state=None):  # noqa: E501
        """V1formPaymentMerchantDataShipping - a model defined in Swagger"""  # noqa: E501
        self._ship_addr_city = None
        self._ship_addr_country = None
        self._ship_addr_line1 = None
        self._ship_addr_line2 = None
        self._ship_addr_line3 = None
        self._ship_addr_post_code = None
        self._ship_addr_state = None
        self.discriminator = None
        if ship_addr_city is not None:
            self.ship_addr_city = ship_addr_city
        if ship_addr_country is not None:
            self.ship_addr_country = ship_addr_country
        if ship_addr_line1 is not None:
            self.ship_addr_line1 = ship_addr_line1
        if ship_addr_line2 is not None:
            self.ship_addr_line2 = ship_addr_line2
        if ship_addr_line3 is not None:
            self.ship_addr_line3 = ship_addr_line3
        if ship_addr_post_code is not None:
            self.ship_addr_post_code = ship_addr_post_code
        if ship_addr_state is not None:
            self.ship_addr_state = ship_addr_state

    @property
    def ship_addr_city(self):
        """Gets the ship_addr_city of this V1formPaymentMerchantDataShipping.  # noqa: E501

        City of delivery address.  # noqa: E501

        :return: The ship_addr_city of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :rtype: str
        """
        return self._ship_addr_city

    @ship_addr_city.setter
    def ship_addr_city(self, ship_addr_city):
        """Sets the ship_addr_city of this V1formPaymentMerchantDataShipping.

        City of delivery address.  # noqa: E501

        :param ship_addr_city: The ship_addr_city of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :type: str
        """

        self._ship_addr_city = ship_addr_city

    @property
    def ship_addr_country(self):
        """Gets the ship_addr_country of this V1formPaymentMerchantDataShipping.  # noqa: E501

        Numerical code (ISO 3166-1) of the country of the delivery address  # noqa: E501

        :return: The ship_addr_country of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :rtype: str
        """
        return self._ship_addr_country

    @ship_addr_country.setter
    def ship_addr_country(self, ship_addr_country):
        """Sets the ship_addr_country of this V1formPaymentMerchantDataShipping.

        Numerical code (ISO 3166-1) of the country of the delivery address  # noqa: E501

        :param ship_addr_country: The ship_addr_country of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :type: str
        """

        self._ship_addr_country = ship_addr_country

    @property
    def ship_addr_line1(self):
        """Gets the ship_addr_line1 of this V1formPaymentMerchantDataShipping.  # noqa: E501

        Delivery address, line 1  # noqa: E501

        :return: The ship_addr_line1 of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :rtype: str
        """
        return self._ship_addr_line1

    @ship_addr_line1.setter
    def ship_addr_line1(self, ship_addr_line1):
        """Sets the ship_addr_line1 of this V1formPaymentMerchantDataShipping.

        Delivery address, line 1  # noqa: E501

        :param ship_addr_line1: The ship_addr_line1 of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :type: str
        """

        self._ship_addr_line1 = ship_addr_line1

    @property
    def ship_addr_line2(self):
        """Gets the ship_addr_line2 of this V1formPaymentMerchantDataShipping.  # noqa: E501

        Delivery address, line 2  # noqa: E501

        :return: The ship_addr_line2 of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :rtype: str
        """
        return self._ship_addr_line2

    @ship_addr_line2.setter
    def ship_addr_line2(self, ship_addr_line2):
        """Sets the ship_addr_line2 of this V1formPaymentMerchantDataShipping.

        Delivery address, line 2  # noqa: E501

        :param ship_addr_line2: The ship_addr_line2 of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :type: str
        """

        self._ship_addr_line2 = ship_addr_line2

    @property
    def ship_addr_line3(self):
        """Gets the ship_addr_line3 of this V1formPaymentMerchantDataShipping.  # noqa: E501

        Delivery address, line 3  # noqa: E501

        :return: The ship_addr_line3 of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :rtype: str
        """
        return self._ship_addr_line3

    @ship_addr_line3.setter
    def ship_addr_line3(self, ship_addr_line3):
        """Sets the ship_addr_line3 of this V1formPaymentMerchantDataShipping.

        Delivery address, line 3  # noqa: E501

        :param ship_addr_line3: The ship_addr_line3 of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :type: str
        """

        self._ship_addr_line3 = ship_addr_line3

    @property
    def ship_addr_post_code(self):
        """Gets the ship_addr_post_code of this V1formPaymentMerchantDataShipping.  # noqa: E501

        Post code of the delivery address  # noqa: E501

        :return: The ship_addr_post_code of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :rtype: str
        """
        return self._ship_addr_post_code

    @ship_addr_post_code.setter
    def ship_addr_post_code(self, ship_addr_post_code):
        """Sets the ship_addr_post_code of this V1formPaymentMerchantDataShipping.

        Post code of the delivery address  # noqa: E501

        :param ship_addr_post_code: The ship_addr_post_code of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :type: str
        """

        self._ship_addr_post_code = ship_addr_post_code

    @property
    def ship_addr_state(self):
        """Gets the ship_addr_state of this V1formPaymentMerchantDataShipping.  # noqa: E501

        State or province of the delivery address. Must comply with ISO 3166-2.  # noqa: E501

        :return: The ship_addr_state of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :rtype: str
        """
        return self._ship_addr_state

    @ship_addr_state.setter
    def ship_addr_state(self, ship_addr_state):
        """Sets the ship_addr_state of this V1formPaymentMerchantDataShipping.

        State or province of the delivery address. Must comply with ISO 3166-2.  # noqa: E501

        :param ship_addr_state: The ship_addr_state of this V1formPaymentMerchantDataShipping.  # noqa: E501
        :type: str
        """

        self._ship_addr_state = ship_addr_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1formPaymentMerchantDataShipping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1formPaymentMerchantDataShipping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
