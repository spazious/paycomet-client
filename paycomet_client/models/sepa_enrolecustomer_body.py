# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SepaEnrolecustomerBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'terminal': 'int',
        'sepa_provider_id': 'int',
        'merchant_code': 'str',
        'merchant_customer_id': 'str',
        'customer_market': 'str',
        'customer_language': 'int'
    }

    attribute_map = {
        'terminal': 'terminal',
        'sepa_provider_id': 'sepaProviderId',
        'merchant_code': 'merchantCode',
        'merchant_customer_id': 'merchantCustomerId',
        'customer_market': 'customerMarket',
        'customer_language': 'customerLanguage'
    }

    def __init__(self, terminal=None, sepa_provider_id=None, merchant_code=None, merchant_customer_id=None, customer_market=None, customer_language=None):  # noqa: E501
        """SepaEnrolecustomerBody - a model defined in Swagger"""  # noqa: E501
        self._terminal = None
        self._sepa_provider_id = None
        self._merchant_code = None
        self._merchant_customer_id = None
        self._customer_market = None
        self._customer_language = None
        self.discriminator = None
        self.terminal = terminal
        self.sepa_provider_id = sepa_provider_id
        self.merchant_code = merchant_code
        self.merchant_customer_id = merchant_customer_id
        if customer_market is not None:
            self.customer_market = customer_market
        if customer_language is not None:
            self.customer_language = customer_language

    @property
    def terminal(self):
        """Gets the terminal of this SepaEnrolecustomerBody.  # noqa: E501

        Product or terminal Id.  # noqa: E501

        :return: The terminal of this SepaEnrolecustomerBody.  # noqa: E501
        :rtype: int
        """
        return self._terminal

    @terminal.setter
    def terminal(self, terminal):
        """Sets the terminal of this SepaEnrolecustomerBody.

        Product or terminal Id.  # noqa: E501

        :param terminal: The terminal of this SepaEnrolecustomerBody.  # noqa: E501
        :type: int
        """
        if terminal is None:
            raise ValueError("Invalid value for `terminal`, must not be `None`")  # noqa: E501

        self._terminal = terminal

    @property
    def sepa_provider_id(self):
        """Gets the sepa_provider_id of this SepaEnrolecustomerBody.  # noqa: E501

        Unique identifier assigned by PAYCOMET for the supplier sending SEPA operations. Available on the client control panel.  # noqa: E501

        :return: The sepa_provider_id of this SepaEnrolecustomerBody.  # noqa: E501
        :rtype: int
        """
        return self._sepa_provider_id

    @sepa_provider_id.setter
    def sepa_provider_id(self, sepa_provider_id):
        """Sets the sepa_provider_id of this SepaEnrolecustomerBody.

        Unique identifier assigned by PAYCOMET for the supplier sending SEPA operations. Available on the client control panel.  # noqa: E501

        :param sepa_provider_id: The sepa_provider_id of this SepaEnrolecustomerBody.  # noqa: E501
        :type: int
        """
        if sepa_provider_id is None:
            raise ValueError("Invalid value for `sepa_provider_id`, must not be `None`")  # noqa: E501

        self._sepa_provider_id = sepa_provider_id

    @property
    def merchant_code(self):
        """Gets the merchant_code of this SepaEnrolecustomerBody.  # noqa: E501

        Unique identifier as PAYCOMET account. Available on the client control panel.  # noqa: E501

        :return: The merchant_code of this SepaEnrolecustomerBody.  # noqa: E501
        :rtype: str
        """
        return self._merchant_code

    @merchant_code.setter
    def merchant_code(self, merchant_code):
        """Sets the merchant_code of this SepaEnrolecustomerBody.

        Unique identifier as PAYCOMET account. Available on the client control panel.  # noqa: E501

        :param merchant_code: The merchant_code of this SepaEnrolecustomerBody.  # noqa: E501
        :type: str
        """
        if merchant_code is None:
            raise ValueError("Invalid value for `merchant_code`, must not be `None`")  # noqa: E501

        self._merchant_code = merchant_code

    @property
    def merchant_customer_id(self):
        """Gets the merchant_customer_id of this SepaEnrolecustomerBody.  # noqa: E501

        Unique identifier of the client of the supplier.  # noqa: E501

        :return: The merchant_customer_id of this SepaEnrolecustomerBody.  # noqa: E501
        :rtype: str
        """
        return self._merchant_customer_id

    @merchant_customer_id.setter
    def merchant_customer_id(self, merchant_customer_id):
        """Sets the merchant_customer_id of this SepaEnrolecustomerBody.

        Unique identifier of the client of the supplier.  # noqa: E501

        :param merchant_customer_id: The merchant_customer_id of this SepaEnrolecustomerBody.  # noqa: E501
        :type: str
        """
        if merchant_customer_id is None:
            raise ValueError("Invalid value for `merchant_customer_id`, must not be `None`")  # noqa: E501

        self._merchant_customer_id = merchant_customer_id

    @property
    def customer_market(self):
        """Gets the customer_market of this SepaEnrolecustomerBody.  # noqa: E501

        Pre selected customer market (allowed values: AT,BE,DK,EE,FI,FR,DE,IE,IT,LV,LT,NL,NO,PL,PT,ES,SE,GB)  # noqa: E501

        :return: The customer_market of this SepaEnrolecustomerBody.  # noqa: E501
        :rtype: str
        """
        return self._customer_market

    @customer_market.setter
    def customer_market(self, customer_market):
        """Sets the customer_market of this SepaEnrolecustomerBody.

        Pre selected customer market (allowed values: AT,BE,DK,EE,FI,FR,DE,IE,IT,LV,LT,NL,NO,PL,PT,ES,SE,GB)  # noqa: E501

        :param customer_market: The customer_market of this SepaEnrolecustomerBody.  # noqa: E501
        :type: str
        """

        self._customer_market = customer_market

    @property
    def customer_language(self):
        """Gets the customer_language of this SepaEnrolecustomerBody.  # noqa: E501

        Desired interface language (allowed values: da_DK,de_DE,en_US,en_GB,es_ES,fi_FI,fr_FR,it_IT,nl_NL,no_NO,pt_PT,pl_PL,sv_SE,et_EE,lt_LT,lv_LV)  # noqa: E501

        :return: The customer_language of this SepaEnrolecustomerBody.  # noqa: E501
        :rtype: int
        """
        return self._customer_language

    @customer_language.setter
    def customer_language(self, customer_language):
        """Sets the customer_language of this SepaEnrolecustomerBody.

        Desired interface language (allowed values: da_DK,de_DE,en_US,en_GB,es_ES,fi_FI,fr_FR,it_IT,nl_NL,no_NO,pt_PT,pl_PL,sv_SE,et_EE,lt_LT,lv_LV)  # noqa: E501

        :param customer_language: The customer_language of this SepaEnrolecustomerBody.  # noqa: E501
        :type: int
        """

        self._customer_language = customer_language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SepaEnrolecustomerBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SepaEnrolecustomerBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
