# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1formPaymentMerchantDataCustomerHomePhone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cc': 'int',
        'subscriber': 'int'
    }

    attribute_map = {
        'cc': 'cc',
        'subscriber': 'subscriber'
    }

    def __init__(self, cc=None, subscriber=None):  # noqa: E501
        """V1formPaymentMerchantDataCustomerHomePhone - a model defined in Swagger"""  # noqa: E501
        self._cc = None
        self._subscriber = None
        self.discriminator = None
        if cc is not None:
            self.cc = cc
        if subscriber is not None:
            self.subscriber = subscriber

    @property
    def cc(self):
        """Gets the cc of this V1formPaymentMerchantDataCustomerHomePhone.  # noqa: E501

        International dialling code of the customer’s home telephone number  # noqa: E501

        :return: The cc of this V1formPaymentMerchantDataCustomerHomePhone.  # noqa: E501
        :rtype: int
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this V1formPaymentMerchantDataCustomerHomePhone.

        International dialling code of the customer’s home telephone number  # noqa: E501

        :param cc: The cc of this V1formPaymentMerchantDataCustomerHomePhone.  # noqa: E501
        :type: int
        """

        self._cc = cc

    @property
    def subscriber(self):
        """Gets the subscriber of this V1formPaymentMerchantDataCustomerHomePhone.  # noqa: E501

        Customer’s home telephone number  # noqa: E501

        :return: The subscriber of this V1formPaymentMerchantDataCustomerHomePhone.  # noqa: E501
        :rtype: int
        """
        return self._subscriber

    @subscriber.setter
    def subscriber(self, subscriber):
        """Sets the subscriber of this V1formPaymentMerchantDataCustomerHomePhone.

        Customer’s home telephone number  # noqa: E501

        :param subscriber: The subscriber of this V1formPaymentMerchantDataCustomerHomePhone.  # noqa: E501
        :type: int
        """

        self._subscriber = subscriber

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1formPaymentMerchantDataCustomerHomePhone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1formPaymentMerchantDataCustomerHomePhone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
