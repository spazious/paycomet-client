# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LaunchpadPreauthorizationBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'terminal': 'int',
        'order': 'str',
        'amount': 'str',
        'currency': 'str',
        'method_id': 'str',
        'original_ip': 'str',
        'secure': 'int',
        'language': 'str',
        'sms_email': 'str',
        'template_id': 'int',
        'email_address': 'str',
        'email_name': 'str',
        'sms_prefix': 'str',
        'sms_number': 'str',
        'expiry_date': 'str',
        'expiry_hour': 'str',
        'expiry_minute': 'str',
        'scoring': 'str',
        'product_description': 'str',
        'trx_type': 'str',
        'sca_exception': 'str',
        'merchant_data': 'V1launchpadauthorizationMerchantData'
    }

    attribute_map = {
        'terminal': 'terminal',
        'order': 'order',
        'amount': 'amount',
        'currency': 'currency',
        'method_id': 'methodId',
        'original_ip': 'originalIp',
        'secure': 'secure',
        'language': 'language',
        'sms_email': 'smsEmail',
        'template_id': 'templateId',
        'email_address': 'emailAddress',
        'email_name': 'emailName',
        'sms_prefix': 'smsPrefix',
        'sms_number': 'smsNumber',
        'expiry_date': 'expiryDate',
        'expiry_hour': 'expiryHour',
        'expiry_minute': 'expiryMinute',
        'scoring': 'scoring',
        'product_description': 'productDescription',
        'trx_type': 'trxType',
        'sca_exception': 'scaException',
        'merchant_data': 'merchantData'
    }

    def __init__(self, terminal=None, order=None, amount=None, currency=None, method_id=None, original_ip=None, secure=None, language='es', sms_email=None, template_id=None, email_address=None, email_name=None, sms_prefix=None, sms_number=None, expiry_date=None, expiry_hour=None, expiry_minute=None, scoring=None, product_description=None, trx_type=None, sca_exception=None, merchant_data=None):  # noqa: E501
        """LaunchpadPreauthorizationBody - a model defined in Swagger"""  # noqa: E501
        self._terminal = None
        self._order = None
        self._amount = None
        self._currency = None
        self._method_id = None
        self._original_ip = None
        self._secure = None
        self._language = None
        self._sms_email = None
        self._template_id = None
        self._email_address = None
        self._email_name = None
        self._sms_prefix = None
        self._sms_number = None
        self._expiry_date = None
        self._expiry_hour = None
        self._expiry_minute = None
        self._scoring = None
        self._product_description = None
        self._trx_type = None
        self._sca_exception = None
        self._merchant_data = None
        self.discriminator = None
        self.terminal = terminal
        self.order = order
        self.amount = amount
        self.currency = currency
        self.method_id = method_id
        self.original_ip = original_ip
        self.secure = secure
        self.language = language
        self.sms_email = sms_email
        self.template_id = template_id
        if email_address is not None:
            self.email_address = email_address
        if email_name is not None:
            self.email_name = email_name
        if sms_prefix is not None:
            self.sms_prefix = sms_prefix
        if sms_number is not None:
            self.sms_number = sms_number
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if expiry_hour is not None:
            self.expiry_hour = expiry_hour
        if expiry_minute is not None:
            self.expiry_minute = expiry_minute
        if scoring is not None:
            self.scoring = scoring
        if product_description is not None:
            self.product_description = product_description
        if trx_type is not None:
            self.trx_type = trx_type
        if sca_exception is not None:
            self.sca_exception = sca_exception
        if merchant_data is not None:
            self.merchant_data = merchant_data

    @property
    def terminal(self):
        """Gets the terminal of this LaunchpadPreauthorizationBody.  # noqa: E501

        Product or terminal Id.  # noqa: E501

        :return: The terminal of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: int
        """
        return self._terminal

    @terminal.setter
    def terminal(self, terminal):
        """Sets the terminal of this LaunchpadPreauthorizationBody.

        Product or terminal Id.  # noqa: E501

        :param terminal: The terminal of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: int
        """
        if terminal is None:
            raise ValueError("Invalid value for `terminal`, must not be `None`")  # noqa: E501

        self._terminal = terminal

    @property
    def order(self):
        """Gets the order of this LaunchpadPreauthorizationBody.  # noqa: E501

        Unique reference for merchant's purchase  # noqa: E501

        :return: The order of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this LaunchpadPreauthorizationBody.

        Unique reference for merchant's purchase  # noqa: E501

        :param order: The order of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    @property
    def amount(self):
        """Gets the amount of this LaunchpadPreauthorizationBody.  # noqa: E501

        Amount of the operation in number format. 1.00 EURO = 100, 4.50 EUROS = 450...  # noqa: E501

        :return: The amount of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this LaunchpadPreauthorizationBody.

        Amount of the operation in number format. 1.00 EURO = 100, 4.50 EUROS = 450...  # noqa: E501

        :param amount: The amount of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this LaunchpadPreauthorizationBody.  # noqa: E501

        Currency of the transaction.   # noqa: E501

        :return: The currency of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LaunchpadPreauthorizationBody.

        Currency of the transaction.   # noqa: E501

        :param currency: The currency of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def method_id(self):
        """Gets the method_id of this LaunchpadPreauthorizationBody.  # noqa: E501

        PAYCOMET payment method ID. 1 is for card.  # noqa: E501

        :return: The method_id of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._method_id

    @method_id.setter
    def method_id(self, method_id):
        """Sets the method_id of this LaunchpadPreauthorizationBody.

        PAYCOMET payment method ID. 1 is for card.  # noqa: E501

        :param method_id: The method_id of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """
        if method_id is None:
            raise ValueError("Invalid value for `method_id`, must not be `None`")  # noqa: E501

        self._method_id = method_id

    @property
    def original_ip(self):
        """Gets the original_ip of this LaunchpadPreauthorizationBody.  # noqa: E501

        IP Address of the customer that initiated the payment transaction  # noqa: E501

        :return: The original_ip of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._original_ip

    @original_ip.setter
    def original_ip(self, original_ip):
        """Sets the original_ip of this LaunchpadPreauthorizationBody.

        IP Address of the customer that initiated the payment transaction  # noqa: E501

        :param original_ip: The original_ip of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """
        if original_ip is None:
            raise ValueError("Invalid value for `original_ip`, must not be `None`")  # noqa: E501

        self._original_ip = original_ip

    @property
    def secure(self):
        """Gets the secure of this LaunchpadPreauthorizationBody.  # noqa: E501

        0 or 1. Indicates if the transaction is secure.  # noqa: E501

        :return: The secure of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: int
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this LaunchpadPreauthorizationBody.

        0 or 1. Indicates if the transaction is secure.  # noqa: E501

        :param secure: The secure of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: int
        """
        if secure is None:
            raise ValueError("Invalid value for `secure`, must not be `None`")  # noqa: E501

        self._secure = secure

    @property
    def language(self):
        """Gets the language of this LaunchpadPreauthorizationBody.  # noqa: E501

        ISO2 code of language.  # noqa: E501

        :return: The language of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LaunchpadPreauthorizationBody.

        ISO2 code of language.  # noqa: E501

        :param language: The language of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def sms_email(self):
        """Gets the sms_email of this LaunchpadPreauthorizationBody.  # noqa: E501

        Sending channel of the payment url. Should be \"sms\" or \"email\".  # noqa: E501

        :return: The sms_email of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._sms_email

    @sms_email.setter
    def sms_email(self, sms_email):
        """Sets the sms_email of this LaunchpadPreauthorizationBody.

        Sending channel of the payment url. Should be \"sms\" or \"email\".  # noqa: E501

        :param sms_email: The sms_email of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """
        if sms_email is None:
            raise ValueError("Invalid value for `sms_email`, must not be `None`")  # noqa: E501

        self._sms_email = sms_email

    @property
    def template_id(self):
        """Gets the template_id of this LaunchpadPreauthorizationBody.  # noqa: E501

        Email or SMS template id to be sent. You can get it in the Control panel.  # noqa: E501

        :return: The template_id of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this LaunchpadPreauthorizationBody.

        Email or SMS template id to be sent. You can get it in the Control panel.  # noqa: E501

        :param template_id: The template_id of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: int
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def email_address(self):
        """Gets the email_address of this LaunchpadPreauthorizationBody.  # noqa: E501

        Conditional. Mandatory in sending method is EMAIL. Email address where link must be sent  # noqa: E501

        :return: The email_address of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this LaunchpadPreauthorizationBody.

        Conditional. Mandatory in sending method is EMAIL. Email address where link must be sent  # noqa: E501

        :param email_address: The email_address of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def email_name(self):
        """Gets the email_name of this LaunchpadPreauthorizationBody.  # noqa: E501

        Conditional. Mandatory in sending method is EMAIL. Email recipient of the email address where link must be sent  # noqa: E501

        :return: The email_name of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._email_name

    @email_name.setter
    def email_name(self, email_name):
        """Sets the email_name of this LaunchpadPreauthorizationBody.

        Conditional. Mandatory in sending method is EMAIL. Email recipient of the email address where link must be sent  # noqa: E501

        :param email_name: The email_name of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._email_name = email_name

    @property
    def sms_prefix(self):
        """Gets the sms_prefix of this LaunchpadPreauthorizationBody.  # noqa: E501

        Conditional. Mandatory in sending method is SMS. International mobile prefix where link must be sent  # noqa: E501

        :return: The sms_prefix of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._sms_prefix

    @sms_prefix.setter
    def sms_prefix(self, sms_prefix):
        """Sets the sms_prefix of this LaunchpadPreauthorizationBody.

        Conditional. Mandatory in sending method is SMS. International mobile prefix where link must be sent  # noqa: E501

        :param sms_prefix: The sms_prefix of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._sms_prefix = sms_prefix

    @property
    def sms_number(self):
        """Gets the sms_number of this LaunchpadPreauthorizationBody.  # noqa: E501

        Conditional. Mandatory in sending method is SMS. Mobile number where link must be sent  # noqa: E501

        :return: The sms_number of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._sms_number

    @sms_number.setter
    def sms_number(self, sms_number):
        """Sets the sms_number of this LaunchpadPreauthorizationBody.

        Conditional. Mandatory in sending method is SMS. Mobile number where link must be sent  # noqa: E501

        :param sms_number: The sms_number of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._sms_number = sms_number

    @property
    def expiry_date(self):
        """Gets the expiry_date of this LaunchpadPreauthorizationBody.  # noqa: E501

        Optional. Link expiration date. Format YYYYMMDD  # noqa: E501

        :return: The expiry_date of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this LaunchpadPreauthorizationBody.

        Optional. Link expiration date. Format YYYYMMDD  # noqa: E501

        :param expiry_date: The expiry_date of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def expiry_hour(self):
        """Gets the expiry_hour of this LaunchpadPreauthorizationBody.  # noqa: E501

        Optional. Link expiration hour. Format HH  # noqa: E501

        :return: The expiry_hour of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._expiry_hour

    @expiry_hour.setter
    def expiry_hour(self, expiry_hour):
        """Sets the expiry_hour of this LaunchpadPreauthorizationBody.

        Optional. Link expiration hour. Format HH  # noqa: E501

        :param expiry_hour: The expiry_hour of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._expiry_hour = expiry_hour

    @property
    def expiry_minute(self):
        """Gets the expiry_minute of this LaunchpadPreauthorizationBody.  # noqa: E501

        Optional. Link expiration minute. Format MM  # noqa: E501

        :return: The expiry_minute of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._expiry_minute

    @expiry_minute.setter
    def expiry_minute(self, expiry_minute):
        """Sets the expiry_minute of this LaunchpadPreauthorizationBody.

        Optional. Link expiration minute. Format MM  # noqa: E501

        :param expiry_minute: The expiry_minute of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._expiry_minute = expiry_minute

    @property
    def scoring(self):
        """Gets the scoring of this LaunchpadPreauthorizationBody.  # noqa: E501

        Risk scoring value from 0 to 100.  # noqa: E501

        :return: The scoring of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._scoring

    @scoring.setter
    def scoring(self, scoring):
        """Sets the scoring of this LaunchpadPreauthorizationBody.

        Risk scoring value from 0 to 100.  # noqa: E501

        :param scoring: The scoring of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._scoring = scoring

    @property
    def product_description(self):
        """Gets the product_description of this LaunchpadPreauthorizationBody.  # noqa: E501

        Description of the product sold.  # noqa: E501

        :return: The product_description of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._product_description

    @product_description.setter
    def product_description(self, product_description):
        """Sets the product_description of this LaunchpadPreauthorizationBody.

        Description of the product sold.  # noqa: E501

        :param product_description: The product_description of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._product_description = product_description

    @property
    def trx_type(self):
        """Gets the trx_type of this LaunchpadPreauthorizationBody.  # noqa: E501

        Obligatory only if an MIT exception has been selected in scaException  # noqa: E501

        :return: The trx_type of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._trx_type

    @trx_type.setter
    def trx_type(self, trx_type):
        """Sets the trx_type of this LaunchpadPreauthorizationBody.

        Obligatory only if an MIT exception has been selected in scaException  # noqa: E501

        :param trx_type: The trx_type of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._trx_type = trx_type

    @property
    def sca_exception(self):
        """Gets the sca_exception of this LaunchpadPreauthorizationBody.  # noqa: E501

        TYPE OF EXCEPTION TO THE SECURE PAYMENT. If not specified, PAYCOMET will try to assign it the most appropriate possible  # noqa: E501

        :return: The sca_exception of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: str
        """
        return self._sca_exception

    @sca_exception.setter
    def sca_exception(self, sca_exception):
        """Sets the sca_exception of this LaunchpadPreauthorizationBody.

        TYPE OF EXCEPTION TO THE SECURE PAYMENT. If not specified, PAYCOMET will try to assign it the most appropriate possible  # noqa: E501

        :param sca_exception: The sca_exception of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: str
        """

        self._sca_exception = sca_exception

    @property
    def merchant_data(self):
        """Gets the merchant_data of this LaunchpadPreauthorizationBody.  # noqa: E501


        :return: The merchant_data of this LaunchpadPreauthorizationBody.  # noqa: E501
        :rtype: V1launchpadauthorizationMerchantData
        """
        return self._merchant_data

    @merchant_data.setter
    def merchant_data(self, merchant_data):
        """Sets the merchant_data of this LaunchpadPreauthorizationBody.


        :param merchant_data: The merchant_data of this LaunchpadPreauthorizationBody.  # noqa: E501
        :type: V1launchpadauthorizationMerchantData
        """

        self._merchant_data = merchant_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LaunchpadPreauthorizationBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LaunchpadPreauthorizationBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
