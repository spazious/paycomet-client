# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'three_ds_req_auth_data': 'str',
        'three_ds_req_auth_method': 'str',
        'three_ds_req_auth_timestamp': 'str'
    }

    attribute_map = {
        'three_ds_req_auth_data': 'threeDSReqAuthData',
        'three_ds_req_auth_method': 'threeDSReqAuthMethod',
        'three_ds_req_auth_timestamp': 'threeDSReqAuthTimestamp'
    }

    def __init__(self, three_ds_req_auth_data=None, three_ds_req_auth_method=None, three_ds_req_auth_timestamp=None):  # noqa: E501
        """V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo - a model defined in Swagger"""  # noqa: E501
        self._three_ds_req_auth_data = None
        self._three_ds_req_auth_method = None
        self._three_ds_req_auth_timestamp = None
        self.discriminator = None
        if three_ds_req_auth_data is not None:
            self.three_ds_req_auth_data = three_ds_req_auth_data
        if three_ds_req_auth_method is not None:
            self.three_ds_req_auth_method = three_ds_req_auth_method
        if three_ds_req_auth_timestamp is not None:
            self.three_ds_req_auth_timestamp = three_ds_req_auth_timestamp

    @property
    def three_ds_req_auth_data(self):
        """Gets the three_ds_req_auth_data of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.  # noqa: E501

        Data which documents and supports a specific authentication process.  # noqa: E501

        :return: The three_ds_req_auth_data of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.  # noqa: E501
        :rtype: str
        """
        return self._three_ds_req_auth_data

    @three_ds_req_auth_data.setter
    def three_ds_req_auth_data(self, three_ds_req_auth_data):
        """Sets the three_ds_req_auth_data of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.

        Data which documents and supports a specific authentication process.  # noqa: E501

        :param three_ds_req_auth_data: The three_ds_req_auth_data of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.  # noqa: E501
        :type: str
        """

        self._three_ds_req_auth_data = three_ds_req_auth_data

    @property
    def three_ds_req_auth_method(self):
        """Gets the three_ds_req_auth_method of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.  # noqa: E501

        Mechanism used by the customer to authenticate themselves in the business. Accepted values: 01 = Without 3DS authentication (for example, customer identified as guest), 02 = Logged onto the account on the ACS using the credentials of the ACS, 03 = Logged onto the account on the ACS using an affiliate identifier, 04 = Logged onto the account on the ACS using the credentials of the issuer, 05 = Logged onto the account on the ACS using a third party authentication, 06 = Logged onto the account on the ACS using a FIDO authenticator  # noqa: E501

        :return: The three_ds_req_auth_method of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.  # noqa: E501
        :rtype: str
        """
        return self._three_ds_req_auth_method

    @three_ds_req_auth_method.setter
    def three_ds_req_auth_method(self, three_ds_req_auth_method):
        """Sets the three_ds_req_auth_method of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.

        Mechanism used by the customer to authenticate themselves in the business. Accepted values: 01 = Without 3DS authentication (for example, customer identified as guest), 02 = Logged onto the account on the ACS using the credentials of the ACS, 03 = Logged onto the account on the ACS using an affiliate identifier, 04 = Logged onto the account on the ACS using the credentials of the issuer, 05 = Logged onto the account on the ACS using a third party authentication, 06 = Logged onto the account on the ACS using a FIDO authenticator  # noqa: E501

        :param three_ds_req_auth_method: The three_ds_req_auth_method of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.  # noqa: E501
        :type: str
        """

        self._three_ds_req_auth_method = three_ds_req_auth_method

    @property
    def three_ds_req_auth_timestamp(self):
        """Gets the three_ds_req_auth_timestamp of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.  # noqa: E501

        Date and time UTC of the authentication. Date format: YYYYMMDDHHMM  # noqa: E501

        :return: The three_ds_req_auth_timestamp of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.  # noqa: E501
        :rtype: str
        """
        return self._three_ds_req_auth_timestamp

    @three_ds_req_auth_timestamp.setter
    def three_ds_req_auth_timestamp(self, three_ds_req_auth_timestamp):
        """Sets the three_ds_req_auth_timestamp of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.

        Date and time UTC of the authentication. Date format: YYYYMMDDHHMM  # noqa: E501

        :param three_ds_req_auth_timestamp: The three_ds_req_auth_timestamp of this V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo.  # noqa: E501
        :type: str
        """

        self._three_ds_req_auth_timestamp = three_ds_req_auth_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
