# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20025Dcc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session': 'str',
        'currency': 'str',
        'currency_iso3': 'str',
        'currency_name': 'str',
        'exchange': 'float',
        'amount': 'str',
        '_date': 'str',
        'markup': 'float'
    }

    attribute_map = {
        'session': 'session',
        'currency': 'currency',
        'currency_iso3': 'currencyIso3',
        'currency_name': 'currencyName',
        'exchange': 'exchange',
        'amount': 'amount',
        '_date': 'date',
        'markup': 'markup'
    }

    def __init__(self, session=None, currency=None, currency_iso3=None, currency_name=None, exchange=None, amount=None, _date=None, markup=None):  # noqa: E501
        """InlineResponse20025Dcc - a model defined in Swagger"""  # noqa: E501
        self._session = None
        self._currency = None
        self._currency_iso3 = None
        self._currency_name = None
        self._exchange = None
        self._amount = None
        self.__date = None
        self._markup = None
        self.discriminator = None
        if session is not None:
            self.session = session
        if currency is not None:
            self.currency = currency
        if currency_iso3 is not None:
            self.currency_iso3 = currency_iso3
        if currency_name is not None:
            self.currency_name = currency_name
        if exchange is not None:
            self.exchange = exchange
        if amount is not None:
            self.amount = amount
        if _date is not None:
            self._date = _date
        if markup is not None:
            self.markup = markup

    @property
    def session(self):
        """Gets the session of this InlineResponse20025Dcc.  # noqa: E501


        :return: The session of this InlineResponse20025Dcc.  # noqa: E501
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this InlineResponse20025Dcc.


        :param session: The session of this InlineResponse20025Dcc.  # noqa: E501
        :type: str
        """

        self._session = session

    @property
    def currency(self):
        """Gets the currency of this InlineResponse20025Dcc.  # noqa: E501


        :return: The currency of this InlineResponse20025Dcc.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse20025Dcc.


        :param currency: The currency of this InlineResponse20025Dcc.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def currency_iso3(self):
        """Gets the currency_iso3 of this InlineResponse20025Dcc.  # noqa: E501


        :return: The currency_iso3 of this InlineResponse20025Dcc.  # noqa: E501
        :rtype: str
        """
        return self._currency_iso3

    @currency_iso3.setter
    def currency_iso3(self, currency_iso3):
        """Sets the currency_iso3 of this InlineResponse20025Dcc.


        :param currency_iso3: The currency_iso3 of this InlineResponse20025Dcc.  # noqa: E501
        :type: str
        """

        self._currency_iso3 = currency_iso3

    @property
    def currency_name(self):
        """Gets the currency_name of this InlineResponse20025Dcc.  # noqa: E501


        :return: The currency_name of this InlineResponse20025Dcc.  # noqa: E501
        :rtype: str
        """
        return self._currency_name

    @currency_name.setter
    def currency_name(self, currency_name):
        """Sets the currency_name of this InlineResponse20025Dcc.


        :param currency_name: The currency_name of this InlineResponse20025Dcc.  # noqa: E501
        :type: str
        """

        self._currency_name = currency_name

    @property
    def exchange(self):
        """Gets the exchange of this InlineResponse20025Dcc.  # noqa: E501


        :return: The exchange of this InlineResponse20025Dcc.  # noqa: E501
        :rtype: float
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this InlineResponse20025Dcc.


        :param exchange: The exchange of this InlineResponse20025Dcc.  # noqa: E501
        :type: float
        """

        self._exchange = exchange

    @property
    def amount(self):
        """Gets the amount of this InlineResponse20025Dcc.  # noqa: E501


        :return: The amount of this InlineResponse20025Dcc.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse20025Dcc.


        :param amount: The amount of this InlineResponse20025Dcc.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def _date(self):
        """Gets the _date of this InlineResponse20025Dcc.  # noqa: E501


        :return: The _date of this InlineResponse20025Dcc.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this InlineResponse20025Dcc.


        :param _date: The _date of this InlineResponse20025Dcc.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def markup(self):
        """Gets the markup of this InlineResponse20025Dcc.  # noqa: E501


        :return: The markup of this InlineResponse20025Dcc.  # noqa: E501
        :rtype: float
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this InlineResponse20025Dcc.


        :param markup: The markup of this InlineResponse20025Dcc.  # noqa: E501
        :type: float
        """

        self._markup = markup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20025Dcc, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20025Dcc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
