# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1formPaymentMerchantDataAft(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'country': 'str',
        'address': 'str',
        'city': 'str',
        'account_number': 'str',
        'account_number_type': 'int',
        'utr': 'str',
        'bai': 'str',
        'sender_name': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'country': 'country',
        'address': 'address',
        'city': 'city',
        'account_number': 'accountNumber',
        'account_number_type': 'accountNumberType',
        'utr': 'Utr',
        'bai': 'bai',
        'sender_name': 'senderName'
    }

    def __init__(self, first_name=None, last_name=None, country=None, address=None, city=None, account_number=None, account_number_type=None, utr=None, bai=None, sender_name=None):  # noqa: E501
        """V1formPaymentMerchantDataAft - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._country = None
        self._address = None
        self._city = None
        self._account_number = None
        self._account_number_type = None
        self._utr = None
        self._bai = None
        self._sender_name = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if country is not None:
            self.country = country
        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        if account_number is not None:
            self.account_number = account_number
        if account_number_type is not None:
            self.account_number_type = account_number_type
        if utr is not None:
            self.utr = utr
        if bai is not None:
            self.bai = bai
        if sender_name is not None:
            self.sender_name = sender_name

    @property
    def first_name(self):
        """Gets the first_name of this V1formPaymentMerchantDataAft.  # noqa: E501

        Receiver name  # noqa: E501

        :return: The first_name of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this V1formPaymentMerchantDataAft.

        Receiver name  # noqa: E501

        :param first_name: The first_name of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this V1formPaymentMerchantDataAft.  # noqa: E501

        Receiver lastname  # noqa: E501

        :return: The last_name of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this V1formPaymentMerchantDataAft.

        Receiver lastname  # noqa: E501

        :param last_name: The last_name of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def country(self):
        """Gets the country of this V1formPaymentMerchantDataAft.  # noqa: E501

        Receiver country (ISO 6133 Alpha-3)  # noqa: E501

        :return: The country of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this V1formPaymentMerchantDataAft.

        Receiver country (ISO 6133 Alpha-3)  # noqa: E501

        :param country: The country of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def address(self):
        """Gets the address of this V1formPaymentMerchantDataAft.  # noqa: E501

        Address line of receiver. Format (^[a-zA-Z0-9\\s]{1,35}$)  # noqa: E501

        :return: The address of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this V1formPaymentMerchantDataAft.

        Address line of receiver. Format (^[a-zA-Z0-9\\s]{1,35}$)  # noqa: E501

        :param address: The address of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this V1formPaymentMerchantDataAft.  # noqa: E501

        City of the receiver. Format (^[a-zA-Z0-9\\s]{1,25}$)  # noqa: E501

        :return: The city of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this V1formPaymentMerchantDataAft.

        City of the receiver. Format (^[a-zA-Z0-9\\s]{1,25}$)  # noqa: E501

        :param city: The city of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def account_number(self):
        """Gets the account_number of this V1formPaymentMerchantDataAft.  # noqa: E501

        Receiver account number. Format (^[a-zA-Z0-9]{34}$)  # noqa: E501

        :return: The account_number of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this V1formPaymentMerchantDataAft.

        Receiver account number. Format (^[a-zA-Z0-9]{34}$)  # noqa: E501

        :param account_number: The account_number of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def account_number_type(self):
        """Gets the account_number_type of this V1formPaymentMerchantDataAft.  # noqa: E501

        00 (Other) | 01 (Card) | 02 (Account) | 03 (Cash) | 05 - Phone Number | 06 - Bank account number (BAN) + Bank Identification Сode (BIC) | 07 - Wallet ID  | 08 -  # noqa: E501

        :return: The account_number_type of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: int
        """
        return self._account_number_type

    @account_number_type.setter
    def account_number_type(self, account_number_type):
        """Sets the account_number_type of this V1formPaymentMerchantDataAft.

        00 (Other) | 01 (Card) | 02 (Account) | 03 (Cash) | 05 - Phone Number | 06 - Bank account number (BAN) + Bank Identification Сode (BIC) | 07 - Wallet ID  | 08 -  # noqa: E501

        :param account_number_type: The account_number_type of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: int
        """

        self._account_number_type = account_number_type

    @property
    def utr(self):
        """Gets the utr of this V1formPaymentMerchantDataAft.  # noqa: E501

        Should be formatted as 0000000 + Year (n-1) last digit of current year + Julian date (n-3) day of the year  + hour (n-6) hhmmss + sequence number (n-2) from 00 to 99.  # noqa: E501

        :return: The utr of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: str
        """
        return self._utr

    @utr.setter
    def utr(self, utr):
        """Sets the utr of this V1formPaymentMerchantDataAft.

        Should be formatted as 0000000 + Year (n-1) last digit of current year + Julian date (n-3) day of the year  + hour (n-6) hhmmss + sequence number (n-2) from 00 to 99.  # noqa: E501

        :param utr: The utr of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: str
        """

        self._utr = utr

    @property
    def bai(self):
        """Gets the bai of this V1formPaymentMerchantDataAft.  # noqa: E501

        Business Application Identifier. AA|BI  # noqa: E501

        :return: The bai of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: str
        """
        return self._bai

    @bai.setter
    def bai(self, bai):
        """Sets the bai of this V1formPaymentMerchantDataAft.

        Business Application Identifier. AA|BI  # noqa: E501

        :param bai: The bai of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: str
        """

        self._bai = bai

    @property
    def sender_name(self):
        """Gets the sender_name of this V1formPaymentMerchantDataAft.  # noqa: E501

        The name of the sender  # noqa: E501

        :return: The sender_name of this V1formPaymentMerchantDataAft.  # noqa: E501
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """Sets the sender_name of this V1formPaymentMerchantDataAft.

        The name of the sender  # noqa: E501

        :param sender_name: The sender_name of this V1formPaymentMerchantDataAft.  # noqa: E501
        :type: str
        """

        self._sender_name = sender_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1formPaymentMerchantDataAft, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1formPaymentMerchantDataAft):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
