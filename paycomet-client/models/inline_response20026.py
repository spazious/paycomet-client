# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20026(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'order': 'str',
        'currency': 'str',
        'auth_code': 'str',
        'card_country': 'str',
        'challenge_url': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'order': 'order',
        'currency': 'currency',
        'auth_code': 'authCode',
        'card_country': 'cardCountry',
        'challenge_url': 'challengeUrl'
    }

    def __init__(self, amount=None, order=None, currency=None, auth_code=None, card_country=None, challenge_url=None):  # noqa: E501
        """InlineResponse20026 - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._order = None
        self._currency = None
        self._auth_code = None
        self._card_country = None
        self._challenge_url = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if order is not None:
            self.order = order
        if currency is not None:
            self.currency = currency
        if auth_code is not None:
            self.auth_code = auth_code
        if card_country is not None:
            self.card_country = card_country
        if challenge_url is not None:
            self.challenge_url = challenge_url

    @property
    def amount(self):
        """Gets the amount of this InlineResponse20026.  # noqa: E501

        Amount of the operation in number format. 1.00 EURO = 100, 4.50 EUROS = 450...  # noqa: E501

        :return: The amount of this InlineResponse20026.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse20026.

        Amount of the operation in number format. 1.00 EURO = 100, 4.50 EUROS = 450...  # noqa: E501

        :param amount: The amount of this InlineResponse20026.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def order(self):
        """Gets the order of this InlineResponse20026.  # noqa: E501

        Reference of the operation.  # noqa: E501

        :return: The order of this InlineResponse20026.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this InlineResponse20026.

        Reference of the operation.  # noqa: E501

        :param order: The order of this InlineResponse20026.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def currency(self):
        """Gets the currency of this InlineResponse20026.  # noqa: E501

        Currency of the transaction.  # noqa: E501

        :return: The currency of this InlineResponse20026.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse20026.

        Currency of the transaction.  # noqa: E501

        :param currency: The currency of this InlineResponse20026.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def auth_code(self):
        """Gets the auth_code of this InlineResponse20026.  # noqa: E501

        Authorization bank code of the transaction (required to execute a return).  # noqa: E501

        :return: The auth_code of this InlineResponse20026.  # noqa: E501
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this InlineResponse20026.

        Authorization bank code of the transaction (required to execute a return).  # noqa: E501

        :param auth_code: The auth_code of this InlineResponse20026.  # noqa: E501
        :type: str
        """

        self._auth_code = auth_code

    @property
    def card_country(self):
        """Gets the card_country of this InlineResponse20026.  # noqa: E501

        Country of the issuer of the card in ISO3 Code (ex.: 724 = Spain). May be left empty.  # noqa: E501

        :return: The card_country of this InlineResponse20026.  # noqa: E501
        :rtype: str
        """
        return self._card_country

    @card_country.setter
    def card_country(self, card_country):
        """Sets the card_country of this InlineResponse20026.

        Country of the issuer of the card in ISO3 Code (ex.: 724 = Spain). May be left empty.  # noqa: E501

        :param card_country: The card_country of this InlineResponse20026.  # noqa: E501
        :type: str
        """

        self._card_country = card_country

    @property
    def challenge_url(self):
        """Gets the challenge_url of this InlineResponse20026.  # noqa: E501


        :return: The challenge_url of this InlineResponse20026.  # noqa: E501
        :rtype: str
        """
        return self._challenge_url

    @challenge_url.setter
    def challenge_url(self, challenge_url):
        """Sets the challenge_url of this InlineResponse20026.


        :param challenge_url: The challenge_url of this InlineResponse20026.  # noqa: E501
        :type: str
        """

        self._challenge_url = challenge_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20026, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20026):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
