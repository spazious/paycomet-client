# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1formPaymentMerchantDataShoppingCart(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'str',
        'quantity': 'int',
        'unit_price': 'int',
        'name': 'str',
        'category': 'str',
        'article_type': 'int'
    }

    attribute_map = {
        'sku': 'sku',
        'quantity': 'quantity',
        'unit_price': 'unitPrice',
        'name': 'name',
        'category': 'category',
        'article_type': 'articleType'
    }

    def __init__(self, sku=None, quantity=None, unit_price=None, name=None, category=None, article_type=None):  # noqa: E501
        """V1formPaymentMerchantDataShoppingCart - a model defined in Swagger"""  # noqa: E501
        self._sku = None
        self._quantity = None
        self._unit_price = None
        self._name = None
        self._category = None
        self._article_type = None
        self.discriminator = None
        if sku is not None:
            self.sku = sku
        if quantity is not None:
            self.quantity = quantity
        if unit_price is not None:
            self.unit_price = unit_price
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if article_type is not None:
            self.article_type = article_type

    @property
    def sku(self):
        """Gets the sku of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501

        Product identifier  # noqa: E501

        :return: The sku of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this V1formPaymentMerchantDataShoppingCart.

        Product identifier  # noqa: E501

        :param sku: The sku of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def quantity(self):
        """Gets the quantity of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501

        Units of product purchased  # noqa: E501

        :return: The quantity of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this V1formPaymentMerchantDataShoppingCart.

        Units of product purchased  # noqa: E501

        :param quantity: The quantity of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def unit_price(self):
        """Gets the unit_price of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501

        unit amount of each product in integer format. 1.00 EURO = 100, 4.50 EUROS = 450, etc.  # noqa: E501

        :return: The unit_price of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :rtype: int
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this V1formPaymentMerchantDataShoppingCart.

        unit amount of each product in integer format. 1.00 EURO = 100, 4.50 EUROS = 450, etc.  # noqa: E501

        :param unit_price: The unit_price of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :type: int
        """

        self._unit_price = unit_price

    @property
    def name(self):
        """Gets the name of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501

        Product name  # noqa: E501

        :return: The name of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1formPaymentMerchantDataShoppingCart.

        Product name  # noqa: E501

        :param name: The name of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501

        Product category  # noqa: E501

        :return: The category of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this V1formPaymentMerchantDataShoppingCart.

        Product category  # noqa: E501

        :param category: The category of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def article_type(self):
        """Gets the article_type of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501

        article type (4 = Discount, 5 = Physical, 6 = Shipping_fee, 7 = Sales_tax, 8 = Digital, 9 = Gift_card, 10 = Store_credit, 11 = Surcharge)  # noqa: E501

        :return: The article_type of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :rtype: int
        """
        return self._article_type

    @article_type.setter
    def article_type(self, article_type):
        """Sets the article_type of this V1formPaymentMerchantDataShoppingCart.

        article type (4 = Discount, 5 = Physical, 6 = Shipping_fee, 7 = Sales_tax, 8 = Digital, 9 = Gift_card, 10 = Store_credit, 11 = Surcharge)  # noqa: E501

        :param article_type: The article_type of this V1formPaymentMerchantDataShoppingCart.  # noqa: E501
        :type: int
        """

        self._article_type = article_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1formPaymentMerchantDataShoppingCart, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1formPaymentMerchantDataShoppingCart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
