# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1cardsSecureAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cavv': 'str',
        'txid': 'str',
        'eci': 'str',
        'three_ds_server_trans_id': 'str',
        'authenticacion_value': 'str',
        'ds_trans_id': 'str',
        'three_ds_version': 'str',
        'authentication_flow': 'str'
    }

    attribute_map = {
        'cavv': 'CAVV',
        'txid': 'TXID',
        'eci': 'ECI',
        'three_ds_server_trans_id': 'threeDSServerTransID',
        'authenticacion_value': 'authenticacionValue',
        'ds_trans_id': 'dsTransID',
        'three_ds_version': 'threeDSVersion',
        'authentication_flow': 'authenticationFlow'
    }

    def __init__(self, cavv=None, txid=None, eci=None, three_ds_server_trans_id=None, authenticacion_value=None, ds_trans_id=None, three_ds_version=None, authentication_flow=None):  # noqa: E501
        """V1cardsSecureAuthentication - a model defined in Swagger"""  # noqa: E501
        self._cavv = None
        self._txid = None
        self._eci = None
        self._three_ds_server_trans_id = None
        self._authenticacion_value = None
        self._ds_trans_id = None
        self._three_ds_version = None
        self._authentication_flow = None
        self.discriminator = None
        if cavv is not None:
            self.cavv = cavv
        if txid is not None:
            self.txid = txid
        if eci is not None:
            self.eci = eci
        if three_ds_server_trans_id is not None:
            self.three_ds_server_trans_id = three_ds_server_trans_id
        if authenticacion_value is not None:
            self.authenticacion_value = authenticacion_value
        if ds_trans_id is not None:
            self.ds_trans_id = ds_trans_id
        if three_ds_version is not None:
            self.three_ds_version = three_ds_version
        if authentication_flow is not None:
            self.authentication_flow = authentication_flow

    @property
    def cavv(self):
        """Gets the cavv of this V1cardsSecureAuthentication.  # noqa: E501

        CAVV value included in a 1.0.2 version ACS card emisor  # noqa: E501

        :return: The cavv of this V1cardsSecureAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """Sets the cavv of this V1cardsSecureAuthentication.

        CAVV value included in a 1.0.2 version ACS card emisor  # noqa: E501

        :param cavv: The cavv of this V1cardsSecureAuthentication.  # noqa: E501
        :type: str
        """

        self._cavv = cavv

    @property
    def txid(self):
        """Gets the txid of this V1cardsSecureAuthentication.  # noqa: E501

        XID value included in a 1.0.2 version ACS card emisor  # noqa: E501

        :return: The txid of this V1cardsSecureAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this V1cardsSecureAuthentication.

        XID value included in a 1.0.2 version ACS card emisor  # noqa: E501

        :param txid: The txid of this V1cardsSecureAuthentication.  # noqa: E501
        :type: str
        """

        self._txid = txid

    @property
    def eci(self):
        """Gets the eci of this V1cardsSecureAuthentication.  # noqa: E501

        ECI value included in a transaction info of the ACS card emisor  # noqa: E501

        :return: The eci of this V1cardsSecureAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._eci

    @eci.setter
    def eci(self, eci):
        """Sets the eci of this V1cardsSecureAuthentication.

        ECI value included in a transaction info of the ACS card emisor  # noqa: E501

        :param eci: The eci of this V1cardsSecureAuthentication.  # noqa: E501
        :type: str
        """

        self._eci = eci

    @property
    def three_ds_server_trans_id(self):
        """Gets the three_ds_server_trans_id of this V1cardsSecureAuthentication.  # noqa: E501

        Transation unique identifier included in a transaction info of the ACS card emisor  # noqa: E501

        :return: The three_ds_server_trans_id of this V1cardsSecureAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._three_ds_server_trans_id

    @three_ds_server_trans_id.setter
    def three_ds_server_trans_id(self, three_ds_server_trans_id):
        """Sets the three_ds_server_trans_id of this V1cardsSecureAuthentication.

        Transation unique identifier included in a transaction info of the ACS card emisor  # noqa: E501

        :param three_ds_server_trans_id: The three_ds_server_trans_id of this V1cardsSecureAuthentication.  # noqa: E501
        :type: str
        """

        self._three_ds_server_trans_id = three_ds_server_trans_id

    @property
    def authenticacion_value(self):
        """Gets the authenticacion_value of this V1cardsSecureAuthentication.  # noqa: E501

        Authenticacion value included in a transaction info of the ACS card emisor  # noqa: E501

        :return: The authenticacion_value of this V1cardsSecureAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._authenticacion_value

    @authenticacion_value.setter
    def authenticacion_value(self, authenticacion_value):
        """Sets the authenticacion_value of this V1cardsSecureAuthentication.

        Authenticacion value included in a transaction info of the ACS card emisor  # noqa: E501

        :param authenticacion_value: The authenticacion_value of this V1cardsSecureAuthentication.  # noqa: E501
        :type: str
        """

        self._authenticacion_value = authenticacion_value

    @property
    def ds_trans_id(self):
        """Gets the ds_trans_id of this V1cardsSecureAuthentication.  # noqa: E501

        Unique transaction identifier assigned by the DS  # noqa: E501

        :return: The ds_trans_id of this V1cardsSecureAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._ds_trans_id

    @ds_trans_id.setter
    def ds_trans_id(self, ds_trans_id):
        """Sets the ds_trans_id of this V1cardsSecureAuthentication.

        Unique transaction identifier assigned by the DS  # noqa: E501

        :param ds_trans_id: The ds_trans_id of this V1cardsSecureAuthentication.  # noqa: E501
        :type: str
        """

        self._ds_trans_id = ds_trans_id

    @property
    def three_ds_version(self):
        """Gets the three_ds_version of this V1cardsSecureAuthentication.  # noqa: E501

        Version of the transaction of the ACS card emisor  # noqa: E501

        :return: The three_ds_version of this V1cardsSecureAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._three_ds_version

    @three_ds_version.setter
    def three_ds_version(self, three_ds_version):
        """Sets the three_ds_version of this V1cardsSecureAuthentication.

        Version of the transaction of the ACS card emisor  # noqa: E501

        :param three_ds_version: The three_ds_version of this V1cardsSecureAuthentication.  # noqa: E501
        :type: str
        """

        self._three_ds_version = three_ds_version

    @property
    def authentication_flow(self):
        """Gets the authentication_flow of this V1cardsSecureAuthentication.  # noqa: E501

        Authentication field to indicate the flow (C: challenge or F: frictionless) given in the transaction  # noqa: E501

        :return: The authentication_flow of this V1cardsSecureAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._authentication_flow

    @authentication_flow.setter
    def authentication_flow(self, authentication_flow):
        """Sets the authentication_flow of this V1cardsSecureAuthentication.

        Authentication field to indicate the flow (C: challenge or F: frictionless) given in the transaction  # noqa: E501

        :param authentication_flow: The authentication_flow of this V1cardsSecureAuthentication.  # noqa: E501
        :type: str
        """

        self._authentication_flow = authentication_flow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1cardsSecureAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1cardsSecureAuthentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
