# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1launchpadsubscriptionMerchantData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer': 'V1launchpadauthorizationMerchantDataCustomer',
        'shipping': 'V1launchpadsubscriptionMerchantDataShipping',
        'billing': 'V1formPaymentMerchantDataBilling',
        'acct_id': 'str',
        'acct_info': 'V1formPaymentMerchantDataAcctInfo',
        'merchant_risk_indicator': 'V1formPaymentMerchantDataMerchantRiskIndicator',
        'three_ds_requestor_authentication_info': 'V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo',
        'shopping_cart': 'list[V1formPaymentMerchantDataShoppingCart]',
        'addr_match': 'str',
        'purchase_instal_data': 'int',
        'recurring_expiry': 'str',
        'recurring_frequency': 'str'
    }

    attribute_map = {
        'customer': 'customer',
        'shipping': 'shipping',
        'billing': 'billing',
        'acct_id': 'acctID',
        'acct_info': 'acctInfo',
        'merchant_risk_indicator': 'merchantRiskIndicator',
        'three_ds_requestor_authentication_info': 'threeDSRequestorAuthenticationInfo',
        'shopping_cart': 'shoppingCart',
        'addr_match': 'addrMatch',
        'purchase_instal_data': 'purchaseInstalData',
        'recurring_expiry': 'recurringExpiry',
        'recurring_frequency': 'recurringFrequency'
    }

    def __init__(self, customer=None, shipping=None, billing=None, acct_id=None, acct_info=None, merchant_risk_indicator=None, three_ds_requestor_authentication_info=None, shopping_cart=None, addr_match=None, purchase_instal_data=None, recurring_expiry=None, recurring_frequency=None):  # noqa: E501
        """V1launchpadsubscriptionMerchantData - a model defined in Swagger"""  # noqa: E501
        self._customer = None
        self._shipping = None
        self._billing = None
        self._acct_id = None
        self._acct_info = None
        self._merchant_risk_indicator = None
        self._three_ds_requestor_authentication_info = None
        self._shopping_cart = None
        self._addr_match = None
        self._purchase_instal_data = None
        self._recurring_expiry = None
        self._recurring_frequency = None
        self.discriminator = None
        if customer is not None:
            self.customer = customer
        if shipping is not None:
            self.shipping = shipping
        if billing is not None:
            self.billing = billing
        if acct_id is not None:
            self.acct_id = acct_id
        if acct_info is not None:
            self.acct_info = acct_info
        if merchant_risk_indicator is not None:
            self.merchant_risk_indicator = merchant_risk_indicator
        if three_ds_requestor_authentication_info is not None:
            self.three_ds_requestor_authentication_info = three_ds_requestor_authentication_info
        if shopping_cart is not None:
            self.shopping_cart = shopping_cart
        if addr_match is not None:
            self.addr_match = addr_match
        if purchase_instal_data is not None:
            self.purchase_instal_data = purchase_instal_data
        if recurring_expiry is not None:
            self.recurring_expiry = recurring_expiry
        if recurring_frequency is not None:
            self.recurring_frequency = recurring_frequency

    @property
    def customer(self):
        """Gets the customer of this V1launchpadsubscriptionMerchantData.  # noqa: E501


        :return: The customer of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: V1launchpadauthorizationMerchantDataCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this V1launchpadsubscriptionMerchantData.


        :param customer: The customer of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: V1launchpadauthorizationMerchantDataCustomer
        """

        self._customer = customer

    @property
    def shipping(self):
        """Gets the shipping of this V1launchpadsubscriptionMerchantData.  # noqa: E501


        :return: The shipping of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: V1launchpadsubscriptionMerchantDataShipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this V1launchpadsubscriptionMerchantData.


        :param shipping: The shipping of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: V1launchpadsubscriptionMerchantDataShipping
        """

        self._shipping = shipping

    @property
    def billing(self):
        """Gets the billing of this V1launchpadsubscriptionMerchantData.  # noqa: E501


        :return: The billing of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: V1formPaymentMerchantDataBilling
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this V1launchpadsubscriptionMerchantData.


        :param billing: The billing of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: V1formPaymentMerchantDataBilling
        """

        self._billing = billing

    @property
    def acct_id(self):
        """Gets the acct_id of this V1launchpadsubscriptionMerchantData.  # noqa: E501

        Additional information you want to send to identify the account  # noqa: E501

        :return: The acct_id of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: str
        """
        return self._acct_id

    @acct_id.setter
    def acct_id(self, acct_id):
        """Sets the acct_id of this V1launchpadsubscriptionMerchantData.

        Additional information you want to send to identify the account  # noqa: E501

        :param acct_id: The acct_id of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: str
        """

        self._acct_id = acct_id

    @property
    def acct_info(self):
        """Gets the acct_info of this V1launchpadsubscriptionMerchantData.  # noqa: E501


        :return: The acct_info of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: V1formPaymentMerchantDataAcctInfo
        """
        return self._acct_info

    @acct_info.setter
    def acct_info(self, acct_info):
        """Sets the acct_info of this V1launchpadsubscriptionMerchantData.


        :param acct_info: The acct_info of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: V1formPaymentMerchantDataAcctInfo
        """

        self._acct_info = acct_info

    @property
    def merchant_risk_indicator(self):
        """Gets the merchant_risk_indicator of this V1launchpadsubscriptionMerchantData.  # noqa: E501


        :return: The merchant_risk_indicator of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: V1formPaymentMerchantDataMerchantRiskIndicator
        """
        return self._merchant_risk_indicator

    @merchant_risk_indicator.setter
    def merchant_risk_indicator(self, merchant_risk_indicator):
        """Sets the merchant_risk_indicator of this V1launchpadsubscriptionMerchantData.


        :param merchant_risk_indicator: The merchant_risk_indicator of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: V1formPaymentMerchantDataMerchantRiskIndicator
        """

        self._merchant_risk_indicator = merchant_risk_indicator

    @property
    def three_ds_requestor_authentication_info(self):
        """Gets the three_ds_requestor_authentication_info of this V1launchpadsubscriptionMerchantData.  # noqa: E501


        :return: The three_ds_requestor_authentication_info of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo
        """
        return self._three_ds_requestor_authentication_info

    @three_ds_requestor_authentication_info.setter
    def three_ds_requestor_authentication_info(self, three_ds_requestor_authentication_info):
        """Sets the three_ds_requestor_authentication_info of this V1launchpadsubscriptionMerchantData.


        :param three_ds_requestor_authentication_info: The three_ds_requestor_authentication_info of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: V1formPaymentMerchantDataThreeDSRequestorAuthenticationInfo
        """

        self._three_ds_requestor_authentication_info = three_ds_requestor_authentication_info

    @property
    def shopping_cart(self):
        """Gets the shopping_cart of this V1launchpadsubscriptionMerchantData.  # noqa: E501


        :return: The shopping_cart of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: list[V1formPaymentMerchantDataShoppingCart]
        """
        return self._shopping_cart

    @shopping_cart.setter
    def shopping_cart(self, shopping_cart):
        """Sets the shopping_cart of this V1launchpadsubscriptionMerchantData.


        :param shopping_cart: The shopping_cart of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: list[V1formPaymentMerchantDataShoppingCart]
        """

        self._shopping_cart = shopping_cart

    @property
    def addr_match(self):
        """Gets the addr_match of this V1launchpadsubscriptionMerchantData.  # noqa: E501

        Indicates whether the delivery address is the same as the invoice address. Y = The delivery address is the same as the invoicing address, N = The delivery and invoice addresses are different  # noqa: E501

        :return: The addr_match of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: str
        """
        return self._addr_match

    @addr_match.setter
    def addr_match(self, addr_match):
        """Sets the addr_match of this V1launchpadsubscriptionMerchantData.

        Indicates whether the delivery address is the same as the invoice address. Y = The delivery address is the same as the invoicing address, N = The delivery and invoice addresses are different  # noqa: E501

        :param addr_match: The addr_match of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: str
        """

        self._addr_match = addr_match

    @property
    def purchase_instal_data(self):
        """Gets the purchase_instal_data of this V1launchpadsubscriptionMerchantData.  # noqa: E501

        Mandatory for Instalment operations (MERCHANT_TRX_TYPE = I). Indicates the maximum number of deferred payment authorizations. Accepted values: The value must be greater than 1  # noqa: E501

        :return: The purchase_instal_data of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: int
        """
        return self._purchase_instal_data

    @purchase_instal_data.setter
    def purchase_instal_data(self, purchase_instal_data):
        """Sets the purchase_instal_data of this V1launchpadsubscriptionMerchantData.

        Mandatory for Instalment operations (MERCHANT_TRX_TYPE = I). Indicates the maximum number of deferred payment authorizations. Accepted values: The value must be greater than 1  # noqa: E501

        :param purchase_instal_data: The purchase_instal_data of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: int
        """

        self._purchase_instal_data = purchase_instal_data

    @property
    def recurring_expiry(self):
        """Gets the recurring_expiry of this V1launchpadsubscriptionMerchantData.  # noqa: E501

        Mandatory for Recurring and Instalment operations (MERCHANT_TRX_TYPE = I or R). The date from which there will be no more authorizations. Accepted format: YYYYMMDD  # noqa: E501

        :return: The recurring_expiry of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: str
        """
        return self._recurring_expiry

    @recurring_expiry.setter
    def recurring_expiry(self, recurring_expiry):
        """Sets the recurring_expiry of this V1launchpadsubscriptionMerchantData.

        Mandatory for Recurring and Instalment operations (MERCHANT_TRX_TYPE = I or R). The date from which there will be no more authorizations. Accepted format: YYYYMMDD  # noqa: E501

        :param recurring_expiry: The recurring_expiry of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: str
        """

        self._recurring_expiry = recurring_expiry

    @property
    def recurring_frequency(self):
        """Gets the recurring_frequency of this V1launchpadsubscriptionMerchantData.  # noqa: E501

        Mandatory for Recurring and Instalment operations (MERCHANT_TRX_TYPE = I or R). Indicates the minimum number of days between authorizations  # noqa: E501

        :return: The recurring_frequency of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :rtype: str
        """
        return self._recurring_frequency

    @recurring_frequency.setter
    def recurring_frequency(self, recurring_frequency):
        """Sets the recurring_frequency of this V1launchpadsubscriptionMerchantData.

        Mandatory for Recurring and Instalment operations (MERCHANT_TRX_TYPE = I or R). Indicates the minimum number of days between authorizations  # noqa: E501

        :param recurring_frequency: The recurring_frequency of this V1launchpadsubscriptionMerchantData.  # noqa: E501
        :type: str
        """

        self._recurring_frequency = recurring_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1launchpadsubscriptionMerchantData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1launchpadsubscriptionMerchantData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
