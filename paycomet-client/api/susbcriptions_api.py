# coding: utf-8

"""
    PAYCOMET REST API

    PAYCOMET API REST for customers.  # noqa: E501

    OpenAPI spec version: 2.99.0
    Contact: tecnico@paycomet.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from paycomet-client.api_client import ApiClient


class SusbcriptionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_subscription(self, paycomet_api_token, **kwargs):  # noqa: E501
        """Create susbcription payment  # noqa: E501

        Create subscription, create subscription token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subscription(paycomet_api_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required) (required)
        :param V1SubscriptionBody body:
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_subscription_with_http_info(paycomet_api_token, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subscription_with_http_info(paycomet_api_token, **kwargs)  # noqa: E501
            return data

    def create_subscription_with_http_info(self, paycomet_api_token, **kwargs):  # noqa: E501
        """Create susbcription payment  # noqa: E501

        Create subscription, create subscription token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subscription_with_http_info(paycomet_api_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required) (required)
        :param V1SubscriptionBody body:
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paycomet_api_token', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paycomet_api_token' is set
        if ('paycomet_api_token' not in params or
                params['paycomet_api_token'] is None):
            raise ValueError("Missing the required parameter `paycomet_api_token` when calling `create_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'paycomet_api_token' in params:
            header_params['PAYCOMET-API-TOKEN'] = params['paycomet_api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/subscription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_subscription(self, paycomet_api_token, order, **kwargs):  # noqa: E501
        """Edit susbcription payment.  # noqa: E501

        Edit a subscription. The subscription is identified by the terminal, the payment method, the iduser and the original reference. The rest of the fields can be changed. Please note that changing an amount in a subscription may result in the bank rejecting the payment as the initial payment will not match the new one. To change the amount it is recommended to use the execute parameter. Even if the amount and currency are not changed they should be indicated with the original values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_subscription(paycomet_api_token, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required) (required)
        :param str order: (required)
        :param OrderEditBody body:
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_subscription_with_http_info(paycomet_api_token, order, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_subscription_with_http_info(paycomet_api_token, order, **kwargs)  # noqa: E501
            return data

    def edit_subscription_with_http_info(self, paycomet_api_token, order, **kwargs):  # noqa: E501
        """Edit susbcription payment.  # noqa: E501

        Edit a subscription. The subscription is identified by the terminal, the payment method, the iduser and the original reference. The rest of the fields can be changed. Please note that changing an amount in a subscription may result in the bank rejecting the payment as the initial payment will not match the new one. To change the amount it is recommended to use the execute parameter. Even if the amount and currency are not changed they should be indicated with the original values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_subscription_with_http_info(paycomet_api_token, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required) (required)
        :param str order: (required)
        :param OrderEditBody body:
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paycomet_api_token', 'order', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paycomet_api_token' is set
        if ('paycomet_api_token' not in params or
                params['paycomet_api_token'] is None):
            raise ValueError("Missing the required parameter `paycomet_api_token` when calling `edit_subscription`")  # noqa: E501
        # verify the required parameter 'order' is set
        if ('order' not in params or
                params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `edit_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order' in params:
            path_params['order'] = params['order']  # noqa: E501

        query_params = []

        header_params = {}
        if 'paycomet_api_token' in params:
            header_params['PAYCOMET-API-TOKEN'] = params['paycomet_api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/subscription/{order}/edit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def info_subscription(self, paycomet_api_token, order, **kwargs):  # noqa: E501
        """Gets susbcription info. If the susbscription is not a card subscription only the idUser is need. TokenUser is just for card subscriptions.  # noqa: E501

        Gets the subscription info. The subscription is identified by the terminal, the payment method, the iduser and the original reference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_subscription(paycomet_api_token, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required) (required)
        :param str order: (required)
        :param OrderInfoBody1 body:
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.info_subscription_with_http_info(paycomet_api_token, order, **kwargs)  # noqa: E501
        else:
            (data) = self.info_subscription_with_http_info(paycomet_api_token, order, **kwargs)  # noqa: E501
            return data

    def info_subscription_with_http_info(self, paycomet_api_token, order, **kwargs):  # noqa: E501
        """Gets susbcription info. If the susbscription is not a card subscription only the idUser is need. TokenUser is just for card subscriptions.  # noqa: E501

        Gets the subscription info. The subscription is identified by the terminal, the payment method, the iduser and the original reference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.info_subscription_with_http_info(paycomet_api_token, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required) (required)
        :param str order: (required)
        :param OrderInfoBody1 body:
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paycomet_api_token', 'order', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method info_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paycomet_api_token' is set
        if ('paycomet_api_token' not in params or
                params['paycomet_api_token'] is None):
            raise ValueError("Missing the required parameter `paycomet_api_token` when calling `info_subscription`")  # noqa: E501
        # verify the required parameter 'order' is set
        if ('order' not in params or
                params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `info_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order' in params:
            path_params['order'] = params['order']  # noqa: E501

        query_params = []

        header_params = {}
        if 'paycomet_api_token' in params:
            header_params['PAYCOMET-API-TOKEN'] = params['paycomet_api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/subscription/{order}/info', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_subscription(self, paycomet_api_token, order, **kwargs):  # noqa: E501
        """Remove susbcription payment. If the susbscription is not a card subscription only the idUser is need. TokenUser is just for card subscriptions.  # noqa: E501

        Delete a subscription. The subscription is identified by the terminal, the payment method, the iduser and the original reference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_subscription(paycomet_api_token, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required) (required)
        :param str order: (required)
        :param OrderRemoveBody body:
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_subscription_with_http_info(paycomet_api_token, order, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_subscription_with_http_info(paycomet_api_token, order, **kwargs)  # noqa: E501
            return data

    def remove_subscription_with_http_info(self, paycomet_api_token, order, **kwargs):  # noqa: E501
        """Remove susbcription payment. If the susbscription is not a card subscription only the idUser is need. TokenUser is just for card subscriptions.  # noqa: E501

        Delete a subscription. The subscription is identified by the terminal, the payment method, the iduser and the original reference.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_subscription_with_http_info(paycomet_api_token, order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str paycomet_api_token: PAYCOMET API key (Authorization privilege required) (required)
        :param str order: (required)
        :param OrderRemoveBody body:
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['paycomet_api_token', 'order', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'paycomet_api_token' is set
        if ('paycomet_api_token' not in params or
                params['paycomet_api_token'] is None):
            raise ValueError("Missing the required parameter `paycomet_api_token` when calling `remove_subscription`")  # noqa: E501
        # verify the required parameter 'order' is set
        if ('order' not in params or
                params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `remove_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order' in params:
            path_params['order'] = params['order']  # noqa: E501

        query_params = []

        header_params = {}
        if 'paycomet_api_token' in params:
            header_params['PAYCOMET-API-TOKEN'] = params['paycomet_api_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/subscription/{order}/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
